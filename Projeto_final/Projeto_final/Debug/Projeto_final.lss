
Projeto_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000004be  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080010e  0080010e  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001065  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a81  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a4  00000000  00000000  00002166  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000668  00000000  00000000  00002fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 41 01 	call	0x282	; 0x282 <main>
  9e:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <get_usart_stream>:

	/* Wait until something arrive  */
	while (!(USART_0->UCSR_A & (1 << RXC0)));

	return USART_0->UDR_;
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	08 95       	ret

000000ac <USART_Init>:
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	95 83       	std	Z+5, r25	; 0x05
  b2:	84 83       	std	Z+4, r24	; 0x04
  b4:	10 82       	st	Z, r1
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	81 83       	std	Z+1, r24	; 0x01
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	82 83       	std	Z+2, r24	; 0x02
  be:	08 95       	ret

000000c0 <USART_tx>:
  c0:	e0 ec       	ldi	r30, 0xC0	; 192
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 81       	ld	r25, Z
  c6:	95 ff       	sbrs	r25, 5
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <USART_tx+0x4>
  ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ce:	08 95       	ret

000000d0 <usart_putchar>:
  d0:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_tx>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret

000000da <__vector_18>:
// Buffer circular na interrupção do Rx
// UDR envia 1 byte, salva no buffer circular.
// Novos dados vão sobre-escrevendo dados antigos quando atingem o tamanho limite do buffer.
// Variáveis "cabeça" e "cauda" para identificar o começo e o fim do dado sendo lido.

ISR(USART_RX_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	
buffer[head] = UDR0;            // Salva o valor recebido em rx no buffer
  ec:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <head>
  f0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f4:	e8 2f       	mov	r30, r24
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e0 5f       	subi	r30, 0xF0	; 240
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
  fc:	90 83       	st	Z, r25
	head++;
  fe:	8f 5f       	subi	r24, 0xFF	; 255
	if(head == 16){
 100:	80 31       	cpi	r24, 0x10	; 16
 102:	39 f0       	breq	.+14     	; 0x112 <__vector_18+0x38>
// Variáveis "cabeça" e "cauda" para identificar o começo e o fim do dado sendo lido.

ISR(USART_RX_vect){
	
buffer[head] = UDR0;            // Salva o valor recebido em rx no buffer
	head++;
 104:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <head>
	if(head == 16){
		head = 0;
	}
	if(head == tail){
 108:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
 10c:	89 13       	cpse	r24, r25
 10e:	13 c0       	rjmp	.+38     	; 0x136 <__vector_18+0x5c>
 110:	07 c0       	rjmp	.+14     	; 0x120 <__vector_18+0x46>
ISR(USART_RX_vect){
	
buffer[head] = UDR0;            // Salva o valor recebido em rx no buffer
	head++;
	if(head == 16){
		head = 0;
 112:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <head>
	}
	if(head == tail){
 116:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 11a:	18 16       	cp	r1, r24
 11c:	61 f4       	brne	.+24     	; 0x136 <__vector_18+0x5c>
 11e:	09 c0       	rjmp	.+18     	; 0x132 <__vector_18+0x58>
		tail++;
 120:	8f 5f       	subi	r24, 0xFF	; 255
		if(tail == 16){
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	19 f0       	breq	.+6      	; 0x12c <__vector_18+0x52>
	head++;
	if(head == 16){
		head = 0;
	}
	if(head == tail){
		tail++;
 126:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 12a:	05 c0       	rjmp	.+10     	; 0x136 <__vector_18+0x5c>
		if(tail == 16){
			tail = 0;
 12c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		}
	}	
}
 130:	02 c0       	rjmp	.+4      	; 0x136 <__vector_18+0x5c>
	head++;
	if(head == 16){
		head = 0;
	}
	if(head == tail){
		tail++;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	f8 cf       	rjmp	.-16     	; 0x126 <__vector_18+0x4c>
		if(tail == 16){
			tail = 0;
		}
	}	
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <usart_buffer_has_data>:

uint8_t usart_buffer_has_data()
{
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
 14e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <head>
 152:	29 13       	cpse	r18, r25
 154:	01 c0       	rjmp	.+2      	; 0x158 <usart_buffer_has_data+0x10>
 156:	80 e0       	ldi	r24, 0x00	; 0
	if(tail != head){
		return 1;
	}
	
	return 0;
}
 158:	08 95       	ret

0000015a <usart_buffer_get_data>:

uint8_t usart_buffer_get_data()
{
	uint8_t aux;
	aux = buffer[tail];
 15a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
 15e:	e9 2f       	mov	r30, r25
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e0 5f       	subi	r30, 0xF0	; 240
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 81       	ld	r24, Z
	tail++;
 168:	9f 5f       	subi	r25, 0xFF	; 255
	
	if(tail == 16)
 16a:	90 31       	cpi	r25, 0x10	; 16
 16c:	19 f0       	breq	.+6      	; 0x174 <usart_buffer_get_data+0x1a>

uint8_t usart_buffer_get_data()
{
	uint8_t aux;
	aux = buffer[tail];
	tail++;
 16e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
 172:	08 95       	ret
	
	if(tail == 16)
		tail = 0;
 174:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	
	return aux;	
 178:	08 95       	ret

0000017a <start_dht22>:
#include "dht22.h"


uint8_t start_dht22(){
	
	DHT_DDR |= (1 << DHT22_DDR);		//define como saída
 17a:	20 9a       	sbi	0x04, 0	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f eb       	ldi	r24, 0xBF	; 191
 17e:	92 e1       	ldi	r25, 0x12	; 18
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <start_dht22+0x6>
 184:	00 c0       	rjmp	.+0      	; 0x186 <start_dht22+0xc>
 186:	00 00       	nop
	_delay_us(1200);
	DHT_DDR &=~ (1 << DHT22_DDR);		//define como entrada
 188:	20 98       	cbi	0x04, 0	; 4
 18a:	87 ec       	ldi	r24, 0xC7	; 199
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <start_dht22+0x14>
 192:	00 c0       	rjmp	.+0      	; 0x194 <start_dht22+0x1a>
 194:	00 00       	nop
	_delay_us(50);
	if(!(DHT_PIN & (1 << DHT22_PIN))){
 196:	83 b1       	in	r24, 0x03	; 3
 198:	80 95       	com	r24
		return 1;
	}
	else {
		return 0;
	}
}
 19a:	81 70       	andi	r24, 0x01	; 1
 19c:	08 95       	ret

0000019e <read_dht22>:

void read_dht22(uint16_t* humidity, uint16_t* temperature)
{
 19e:	fc 01       	movw	r30, r24
 1a0:	db 01       	movw	r26, r22
	uint16_t temp = 0;
	uint8_t	 parity = 0;
	uint8_t parity_check = 0;
	uint8_t count = 0;
	
	while(!(DHT_PIN & (1 << DHT22_PIN)));
 1a2:	18 9b       	sbis	0x03, 0	; 3
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <read_dht22+0x4>
	while(DHT_PIN & (1 << DHT22_PIN));
 1a6:	18 99       	sbic	0x03, 0	; 3
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <read_dht22+0x8>
 1aa:	90 e1       	ldi	r25, 0x10	; 16
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
	
	for(count = 0; count < 16; count ++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
 1b0:	18 9b       	sbis	0x03, 0	; 3
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <read_dht22+0x12>
 1b4:	85 ed       	ldi	r24, 0xD5	; 213
 1b6:	8a 95       	dec	r24
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <read_dht22+0x18>
 1ba:	00 00       	nop
		_delay_us(40);									//delay necessário para fazer a leitura no momento correto
		hum = (hum << 1);								//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
 1c0:	18 99       	sbic	0x03, 0	; 3
			hum|= 1;
 1c2:	21 60       	ori	r18, 0x01	; 1
		}
		else{
			hum |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
 1c4:	18 99       	sbic	0x03, 0	; 3
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <read_dht22+0x26>
 1c8:	91 50       	subi	r25, 0x01	; 1
	uint8_t count = 0;
	
	while(!(DHT_PIN & (1 << DHT22_PIN)));
	while(DHT_PIN & (1 << DHT22_PIN));
	
	for(count = 0; count < 16; count ++){
 1ca:	91 f7       	brne	.-28     	; 0x1b0 <read_dht22+0x12>
 1cc:	90 e1       	ldi	r25, 0x10	; 16
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	50 e0       	ldi	r21, 0x00	; 0
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
		
	}
	for(count = 0; count < 16; count ++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
 1d2:	18 9b       	sbis	0x03, 0	; 3
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <read_dht22+0x34>
 1d6:	85 ed       	ldi	r24, 0xD5	; 213
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <read_dht22+0x3a>
 1dc:	00 00       	nop
		_delay_us(40);
		temp = (temp << 1);								//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
 1e2:	18 99       	sbic	0x03, 0	; 3
			temp |= 1;
 1e4:	41 60       	ori	r20, 0x01	; 1
		}
		else{
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
 1e6:	18 99       	sbic	0x03, 0	; 3
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <read_dht22+0x48>
 1ea:	91 50       	subi	r25, 0x01	; 1
			hum |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
		
	}
	for(count = 0; count < 16; count ++){
 1ec:	91 f7       	brne	.-28     	; 0x1d2 <read_dht22+0x34>
 1ee:	98 e0       	ldi	r25, 0x08	; 8
 1f0:	70 e0       	ldi	r23, 0x00	; 0
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
	}
	for(count = 0; count < 8; count++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
 1f2:	18 9b       	sbis	0x03, 0	; 3
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <read_dht22+0x54>
 1f6:	85 ed       	ldi	r24, 0xD5	; 213
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <read_dht22+0x5a>
 1fc:	00 00       	nop
		_delay_us(40);									//delay necessário para fazer a leitura no momento correto
		parity = (parity << 1);							//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
 1fe:	77 0f       	add	r23, r23
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
 200:	18 99       	sbic	0x03, 0	; 3
			parity |= 1;
 202:	71 60       	ori	r23, 0x01	; 1
		}
		else{
			parity |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));			//espera enquanto ficar em high
 204:	18 99       	sbic	0x03, 0	; 3
 206:	fe cf       	rjmp	.-4      	; 0x204 <read_dht22+0x66>
 208:	91 50       	subi	r25, 0x01	; 1
		else{
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
	}
	for(count = 0; count < 8; count++){
 20a:	99 f7       	brne	.-26     	; 0x1f2 <read_dht22+0x54>
			parity |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));			//espera enquanto ficar em high
	}
	
	*temperature = temp;		
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	5c 93       	st	X, r21
 210:	4e 93       	st	-X, r20
	*humidity = hum;
 212:	31 83       	std	Z+1, r19	; 0x01
 214:	20 83       	st	Z, r18
	parity_check += temp;
	parity_check += (hum & (0xFF));
	hum = (hum >> 8);
	parity_check += hum;
	
	if(parity_check != parity){		//checa se a paridade é diferente, se for ele coloca 99.9 nos valores da saída, senão coloca o valor correto salvo previamente
 216:	93 2f       	mov	r25, r19
 218:	92 0f       	add	r25, r18
 21a:	94 0f       	add	r25, r20
 21c:	95 0f       	add	r25, r21
 21e:	79 17       	cp	r23, r25
 220:	31 f0       	breq	.+12     	; 0x22e <read_dht22+0x90>
		*temperature = 999;
 222:	87 ee       	ldi	r24, 0xE7	; 231
 224:	93 e0       	ldi	r25, 0x03	; 3
 226:	8d 93       	st	X+, r24
 228:	9c 93       	st	X, r25
		*humidity = 999;
 22a:	91 83       	std	Z+1, r25	; 0x01
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <CRC16_2>:
uint16_t little_to_big(uint16_t input)
{
	uint16_t output;
	output = (input >> 8) + (input << 8);	// Deslocando os bits para a ordem correta do Modbus
	return output;
}
 230:	16 16       	cp	r1, r22
 232:	17 06       	cpc	r1, r23
 234:	0c f5       	brge	.+66     	; 0x278 <CRC16_2+0x48>
 236:	fc 01       	movw	r30, r24
 238:	68 0f       	add	r22, r24
 23a:	79 1f       	adc	r23, r25
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	9f ef       	ldi	r25, 0xFF	; 255
 240:	a0 e0       	ldi	r26, 0x00	; 0
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	21 91       	ld	r18, Z+
 246:	82 27       	eor	r24, r18
 248:	28 e0       	ldi	r18, 0x08	; 8
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	80 ff       	sbrs	r24, 0
 24e:	09 c0       	rjmp	.+18     	; 0x262 <CRC16_2+0x32>
 250:	b6 95       	lsr	r27
 252:	a7 95       	ror	r26
 254:	97 95       	ror	r25
 256:	87 95       	ror	r24
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	84 27       	eor	r24, r20
 25c:	40 ea       	ldi	r20, 0xA0	; 160
 25e:	94 27       	eor	r25, r20
 260:	04 c0       	rjmp	.+8      	; 0x26a <CRC16_2+0x3a>
 262:	b6 95       	lsr	r27
 264:	a7 95       	ror	r26
 266:	97 95       	ror	r25
 268:	87 95       	ror	r24
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	31 09       	sbc	r19, r1
 26e:	71 f7       	brne	.-36     	; 0x24c <CRC16_2+0x1c>
 270:	e6 17       	cp	r30, r22
 272:	f7 07       	cpc	r31, r23
 274:	39 f7       	brne	.-50     	; 0x244 <CRC16_2+0x14>
 276:	08 95       	ret
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	9f ef       	ldi	r25, 0xFF	; 255
 27c:	a0 e0       	ldi	r26, 0x00	; 0
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	08 95       	ret

00000282 <main>:

int main(void)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	2c 97       	sbiw	r28, 0x0c	; 12
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
	FILE* lcd = 0;
	FILE* usart = 0;
	uint8_t index = 0;
	uint8_t * pkg_byte = (uint8_t *)&tx_pkg;	// Pkg_byte contém o endereço do pacote que foi enviado (vetor de bytes)
	uint8_t state = SEND_TEMP;
	uint16_t humidity = 0;
 296:	1a 86       	std	Y+10, r1	; 0x0a
 298:	19 86       	std	Y+9, r1	; 0x09
	uint16_t temperature = 0;
 29a:	1c 86       	std	Y+12, r1	; 0x0c
 29c:	1b 86       	std	Y+11, r1	; 0x0b
	//inic_LCD_4bits();
	//lcd = inic_stream();
	usart = get_usart_stream();
 29e:	0e 94 53 00 	call	0xa6	; 0xa6 <get_usart_stream>
 2a2:	7c 01       	movw	r14, r24
	USART_Init(B9600);
 2a4:	87 e6       	ldi	r24, 0x67	; 103
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 56 00 	call	0xac	; 0xac <USART_Init>
	sei();
 2ac:	78 94       	sei
	modbus_pkg_t tx_pkg;	 // Dados que serão enviados ao Modbus
	FILE* lcd = 0;
	FILE* usart = 0;
	uint8_t index = 0;
	uint8_t * pkg_byte = (uint8_t *)&tx_pkg;	// Pkg_byte contém o endereço do pacote que foi enviado (vetor de bytes)
	uint8_t state = SEND_TEMP;
 2ae:	11 e0       	ldi	r17, 0x01	; 1
int main(void)
{
	modbus_pkg_t tx_pkg;	 // Dados que serão enviados ao Modbus
	FILE* lcd = 0;
	FILE* usart = 0;
	uint8_t index = 0;
 2b0:	51 2c       	mov	r5, r1
			
			if(usart_buffer_has_data()){
				if(pkg_byte[index] == usart_buffer_get_data()){
					index++;
					if(index == 8){
						state = SEND_HUM;
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f3 e0       	ldi	r31, 0x03	; 3
 2b6:	6f 2e       	mov	r6, r31
 2b8:	f0 2d       	mov	r31, r0
			
			break;

		case SEND_HUM:
			// Preparando o pacote
			tx_pkg.addr = 0x15;
 2ba:	0f 2e       	mov	r0, r31
 2bc:	f5 e1       	ldi	r31, 0x15	; 21
 2be:	9f 2e       	mov	r9, r31
 2c0:	f0 2d       	mov	r31, r0
			tx_pkg.cmd  = 0x01;
 2c2:	01 e0       	ldi	r16, 0x01	; 1
			tx_pkg.reg  = 0x0600;	// Big Endian
 2c4:	0f 2e       	mov	r0, r31
 2c6:	a1 2c       	mov	r10, r1
 2c8:	f6 e0       	ldi	r31, 0x06	; 6
 2ca:	bf 2e       	mov	r11, r31
 2cc:	f0 2d       	mov	r31, r0
			tx_pkg.crc  = CRC16_2(&tx_pkg, 6);	// Endereço do pacote e quantos bytes são para o cálculo
		
			// Enviando o pacote
			fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);
			index = 0;
			state = RECV_HUM;
 2ce:	68 94       	set
 2d0:	77 24       	eor	r7, r7
 2d2:	72 f8       	bld	r7, 2
			
		case SEND_TEMP:
			// Preparando o pacote
			tx_pkg.addr = 0x15;
			tx_pkg.cmd  = 0x01;
			tx_pkg.reg  = 0x0500;	// Big Endian
 2d4:	0f 2e       	mov	r0, r31
 2d6:	c1 2c       	mov	r12, r1
 2d8:	f5 e0       	ldi	r31, 0x05	; 5
 2da:	df 2e       	mov	r13, r31
 2dc:	f0 2d       	mov	r31, r0
			tx_pkg.crc  = CRC16_2(&tx_pkg, 6);	// Endereço do pacote e quantos bytes são para o cálculo
			
			// Enviando o pacote
			fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);
			index = 0;
			state = RECV_TEMP;
 2de:	68 94       	set
 2e0:	88 24       	eor	r8, r8
 2e2:	81 f8       	bld	r8, 1
	//   1200 inicial + 50 para leitura de low + 130 de espera até resposta + (120*40)
	//   tempo máximo de leitura do bit vezes a quantidade de bits = 6180 uS
	//   topo 124, timer0, prescaler 1024
	while (1) 
    {
		if(start_dht22() == 1){
 2e4:	0e 94 bd 00 	call	0x17a	; 0x17a <start_dht22>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	39 f4       	brne	.+14     	; 0x2fa <main+0x78>
			read_dht22(&humidity, &temperature);	
 2ec:	be 01       	movw	r22, r28
 2ee:	65 5f       	subi	r22, 0xF5	; 245
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	ce 01       	movw	r24, r28
 2f4:	09 96       	adiw	r24, 0x09	; 9
 2f6:	0e 94 cf 00 	call	0x19e	; 0x19e <read_dht22>
		}	
		
		switch(state){
 2fa:	12 30       	cpi	r17, 0x02	; 2
 2fc:	49 f1       	breq	.+82     	; 0x350 <main+0xce>
 2fe:	18 f4       	brcc	.+6      	; 0x306 <main+0x84>
 300:	11 30       	cpi	r17, 0x01	; 1
 302:	39 f0       	breq	.+14     	; 0x312 <main+0x90>
 304:	ef cf       	rjmp	.-34     	; 0x2e4 <main+0x62>
 306:	13 30       	cpi	r17, 0x03	; 3
 308:	c1 f1       	breq	.+112    	; 0x37a <main+0xf8>
 30a:	14 30       	cpi	r17, 0x04	; 4
 30c:	09 f4       	brne	.+2      	; 0x310 <main+0x8e>
 30e:	54 c0       	rjmp	.+168    	; 0x3b8 <main+0x136>
 310:	e9 cf       	rjmp	.-46     	; 0x2e4 <main+0x62>
			
		case SEND_TEMP:
			// Preparando o pacote
			tx_pkg.addr = 0x15;
 312:	99 82       	std	Y+1, r9	; 0x01
			tx_pkg.cmd  = 0x01;
 314:	0a 83       	std	Y+2, r16	; 0x02
			tx_pkg.reg  = 0x0500;	// Big Endian
 316:	dc 82       	std	Y+4, r13	; 0x04
 318:	cb 82       	std	Y+3, r12	; 0x03
			tx_pkg.data = little_to_big(temperature);
 31a:	8b 85       	ldd	r24, Y+11	; 0x0b
 31c:	9c 85       	ldd	r25, Y+12	; 0x0c
 31e:	98 27       	eor	r25, r24
 320:	89 27       	eor	r24, r25
 322:	98 27       	eor	r25, r24
 324:	9e 83       	std	Y+6, r25	; 0x06
 326:	8d 83       	std	Y+5, r24	; 0x05
			tx_pkg.crc  = CRC16_2(&tx_pkg, 6);	// Endereço do pacote e quantos bytes são para o cálculo
 328:	66 e0       	ldi	r22, 0x06	; 6
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	0e 94 18 01 	call	0x230	; 0x230 <CRC16_2>
 334:	98 87       	std	Y+8, r25	; 0x08
 336:	8f 83       	std	Y+7, r24	; 0x07
			
			// Enviando o pacote
			fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);
 338:	97 01       	movw	r18, r14
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	68 e0       	ldi	r22, 0x08	; 8
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <fwrite>
			index = 0;
			state = RECV_TEMP;
 34a:	18 2d       	mov	r17, r8
			tx_pkg.data = little_to_big(temperature);
			tx_pkg.crc  = CRC16_2(&tx_pkg, 6);	// Endereço do pacote e quantos bytes são para o cálculo
			
			// Enviando o pacote
			fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);
			index = 0;
 34c:	51 2c       	mov	r5, r1
			state = RECV_TEMP;
			break;
 34e:	ca cf       	rjmp	.-108    	; 0x2e4 <main+0x62>
			
		case RECV_TEMP:
			
			if(usart_buffer_has_data()){
 350:	0e 94 a4 00 	call	0x148	; 0x148 <usart_buffer_has_data>
 354:	88 23       	and	r24, r24
 356:	31 f2       	breq	.-116    	; 0x2e4 <main+0x62>
				if(pkg_byte[index] == usart_buffer_get_data()){
 358:	e1 e0       	ldi	r30, 0x01	; 1
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ec 0f       	add	r30, r28
 35e:	fd 1f       	adc	r31, r29
 360:	e5 0d       	add	r30, r5
 362:	f1 1d       	adc	r31, r1
 364:	40 80       	ld	r4, Z
 366:	0e 94 ad 00 	call	0x15a	; 0x15a <usart_buffer_get_data>
 36a:	48 12       	cpse	r4, r24
 36c:	bb cf       	rjmp	.-138    	; 0x2e4 <main+0x62>
					index++;
 36e:	53 94       	inc	r5
					if(index == 8){
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	58 12       	cpse	r5, r24
 374:	b7 cf       	rjmp	.-146    	; 0x2e4 <main+0x62>
						state = SEND_HUM;
 376:	16 2d       	mov	r17, r6
 378:	b5 cf       	rjmp	.-150    	; 0x2e4 <main+0x62>
			
			break;

		case SEND_HUM:
			// Preparando o pacote
			tx_pkg.addr = 0x15;
 37a:	99 82       	std	Y+1, r9	; 0x01
			tx_pkg.cmd  = 0x01;
 37c:	0a 83       	std	Y+2, r16	; 0x02
			tx_pkg.reg  = 0x0600;	// Big Endian
 37e:	bc 82       	std	Y+4, r11	; 0x04
 380:	ab 82       	std	Y+3, r10	; 0x03
			tx_pkg.data = little_to_big(humidity);
 382:	89 85       	ldd	r24, Y+9	; 0x09
 384:	9a 85       	ldd	r25, Y+10	; 0x0a
 386:	98 27       	eor	r25, r24
 388:	89 27       	eor	r24, r25
 38a:	98 27       	eor	r25, r24
 38c:	9e 83       	std	Y+6, r25	; 0x06
 38e:	8d 83       	std	Y+5, r24	; 0x05
			tx_pkg.crc  = CRC16_2(&tx_pkg, 6);	// Endereço do pacote e quantos bytes são para o cálculo
 390:	66 e0       	ldi	r22, 0x06	; 6
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	0e 94 18 01 	call	0x230	; 0x230 <CRC16_2>
 39c:	98 87       	std	Y+8, r25	; 0x08
 39e:	8f 83       	std	Y+7, r24	; 0x07
		
			// Enviando o pacote
			fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);
 3a0:	97 01       	movw	r18, r14
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	50 e0       	ldi	r21, 0x00	; 0
 3a6:	68 e0       	ldi	r22, 0x08	; 8
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <fwrite>
			index = 0;
			state = RECV_HUM;
 3b2:	17 2d       	mov	r17, r7
			tx_pkg.data = little_to_big(humidity);
			tx_pkg.crc  = CRC16_2(&tx_pkg, 6);	// Endereço do pacote e quantos bytes são para o cálculo
		
			// Enviando o pacote
			fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);
			index = 0;
 3b4:	51 2c       	mov	r5, r1
			state = RECV_HUM;
			break;
 3b6:	96 cf       	rjmp	.-212    	; 0x2e4 <main+0x62>
		
		case RECV_HUM:
			
			if(usart_buffer_has_data()){
 3b8:	0e 94 a4 00 	call	0x148	; 0x148 <usart_buffer_has_data>
 3bc:	88 23       	and	r24, r24
 3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x140>
 3c0:	91 cf       	rjmp	.-222    	; 0x2e4 <main+0x62>
				if(pkg_byte[index] == usart_buffer_get_data()){
 3c2:	e1 e0       	ldi	r30, 0x01	; 1
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	ec 0f       	add	r30, r28
 3c8:	fd 1f       	adc	r31, r29
 3ca:	e5 0d       	add	r30, r5
 3cc:	f1 1d       	adc	r31, r1
 3ce:	40 80       	ld	r4, Z
 3d0:	0e 94 ad 00 	call	0x15a	; 0x15a <usart_buffer_get_data>
 3d4:	48 12       	cpse	r4, r24
 3d6:	86 cf       	rjmp	.-244    	; 0x2e4 <main+0x62>
					index++;
 3d8:	53 94       	inc	r5
					if(index == 8){
 3da:	88 e0       	ldi	r24, 0x08	; 8
 3dc:	58 12       	cpse	r5, r24
 3de:	82 cf       	rjmp	.-252    	; 0x2e4 <main+0x62>
						state = SEND_TEMP;
 3e0:	10 2f       	mov	r17, r16
 3e2:	80 cf       	rjmp	.-256    	; 0x2e4 <main+0x62>

000003e4 <fwrite>:
 3e4:	a0 e0       	ldi	r26, 0x00	; 0
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e8 ef       	ldi	r30, 0xF8	; 248
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	0c 94 2c 02 	jmp	0x458	; 0x458 <__prologue_saves__+0xc>
 3f0:	5b 01       	movw	r10, r22
 3f2:	4a 01       	movw	r8, r20
 3f4:	79 01       	movw	r14, r18
 3f6:	d9 01       	movw	r26, r18
 3f8:	13 96       	adiw	r26, 0x03	; 3
 3fa:	2c 91       	ld	r18, X
 3fc:	21 ff       	sbrs	r18, 1
 3fe:	1d c0       	rjmp	.+58     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 400:	c0 e0       	ldi	r28, 0x00	; 0
 402:	d0 e0       	ldi	r29, 0x00	; 0
 404:	c8 15       	cp	r28, r8
 406:	d9 05       	cpc	r29, r9
 408:	d9 f0       	breq	.+54     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 40a:	8c 01       	movw	r16, r24
 40c:	6c 01       	movw	r12, r24
 40e:	ca 0c       	add	r12, r10
 410:	db 1c       	adc	r13, r11
 412:	c8 01       	movw	r24, r16
 414:	0c 15       	cp	r16, r12
 416:	1d 05       	cpc	r17, r13
 418:	71 f0       	breq	.+28     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 41a:	0f 5f       	subi	r16, 0xFF	; 255
 41c:	1f 4f       	sbci	r17, 0xFF	; 255
 41e:	d7 01       	movw	r26, r14
 420:	18 96       	adiw	r26, 0x08	; 8
 422:	ed 91       	ld	r30, X+
 424:	fc 91       	ld	r31, X
 426:	19 97       	sbiw	r26, 0x09	; 9
 428:	b7 01       	movw	r22, r14
 42a:	dc 01       	movw	r26, r24
 42c:	8c 91       	ld	r24, X
 42e:	09 95       	icall
 430:	89 2b       	or	r24, r25
 432:	79 f3       	breq	.-34     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 434:	05 c0       	rjmp	.+10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 436:	21 96       	adiw	r28, 0x01	; 1
 438:	e5 cf       	rjmp	.-54     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	ce 01       	movw	r24, r28
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	ec e0       	ldi	r30, 0x0C	; 12
 448:	0c 94 48 02 	jmp	0x490	; 0x490 <__epilogue_restores__+0xc>

0000044c <__prologue_saves__>:
 44c:	2f 92       	push	r2
 44e:	3f 92       	push	r3
 450:	4f 92       	push	r4
 452:	5f 92       	push	r5
 454:	6f 92       	push	r6
 456:	7f 92       	push	r7
 458:	8f 92       	push	r8
 45a:	9f 92       	push	r9
 45c:	af 92       	push	r10
 45e:	bf 92       	push	r11
 460:	cf 92       	push	r12
 462:	df 92       	push	r13
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	ca 1b       	sub	r28, r26
 476:	db 0b       	sbc	r29, r27
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	09 94       	ijmp

00000484 <__epilogue_restores__>:
 484:	2a 88       	ldd	r2, Y+18	; 0x12
 486:	39 88       	ldd	r3, Y+17	; 0x11
 488:	48 88       	ldd	r4, Y+16	; 0x10
 48a:	5f 84       	ldd	r5, Y+15	; 0x0f
 48c:	6e 84       	ldd	r6, Y+14	; 0x0e
 48e:	7d 84       	ldd	r7, Y+13	; 0x0d
 490:	8c 84       	ldd	r8, Y+12	; 0x0c
 492:	9b 84       	ldd	r9, Y+11	; 0x0b
 494:	aa 84       	ldd	r10, Y+10	; 0x0a
 496:	b9 84       	ldd	r11, Y+9	; 0x09
 498:	c8 84       	ldd	r12, Y+8	; 0x08
 49a:	df 80       	ldd	r13, Y+7	; 0x07
 49c:	ee 80       	ldd	r14, Y+6	; 0x06
 49e:	fd 80       	ldd	r15, Y+5	; 0x05
 4a0:	0c 81       	ldd	r16, Y+4	; 0x04
 4a2:	1b 81       	ldd	r17, Y+3	; 0x03
 4a4:	aa 81       	ldd	r26, Y+2	; 0x02
 4a6:	b9 81       	ldd	r27, Y+1	; 0x01
 4a8:	ce 0f       	add	r28, r30
 4aa:	d1 1d       	adc	r29, r1
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	ed 01       	movw	r28, r26
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
