
Projeto_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000052a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001979  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce1  00000000  00000000  0000208d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a84  00000000  00000000  00002d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060f  00000000  00000000  00003988  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000df7  00000000  00000000  00003f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004d8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a8 01 	call	0x350	; 0x350 <main>
  8e:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <get_usart_stream>:
FILE usart_str = FDEV_SETUP_STREAM(usart_putchar, NULL, _FDEV_SETUP_WRITE);

/* Return stream pointer  */
FILE * get_usart_stream(){
	return &usart_str;
}
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	08 95       	ret

0000009c <USART_Init>:

void USART_Init(uint16_t bauds){

	USART_0->UBRR_H = (uint8_t) (bauds >> 8);
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	95 83       	std	Z+5, r25	; 0x05
	USART_0->UBRR_L = bauds;
  a2:	84 83       	std	Z+4, r24	; 0x04

	/* Disable double speed  */
	USART_0->UCSR_A = 0;
  a4:	10 82       	st	Z, r1
	/* Enable TX and RX */
	USART_0->UCSR_B = SET(RXEN0) | SET(TXEN0) | SET(RXCIE0);
  a6:	88 e9       	ldi	r24, 0x98	; 152
  a8:	81 83       	std	Z+1, r24	; 0x01
	/* Asynchronous mode:
	 * - 8 data bits
	 * - 1 stop bit
	 * - no parity 	 */
	USART_0->UCSR_C = SET(UCSZ01) | SET(UCSZ00);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	82 83       	std	Z+2, r24	; 0x02
  ae:	08 95       	ret

000000b0 <USART_tx>:

/* Send one byte: busy waiting */
void USART_tx(uint8_t data) {

	/* Wait until hardware is ready */
	while (!(USART_0->UCSR_A & (1 << UDRE0)));
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	95 ff       	sbrs	r25, 5
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <USART_tx+0x4>

	USART_0->UDR_ = data;
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  be:	08 95       	ret

000000c0 <usart_putchar>:
	return USART_0->UDR_;
}


static int usart_putchar(char c, FILE *fp){
	USART_tx(c);
  c0:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_tx>

	return 0;
}
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	08 95       	ret

000000ca <USART_rx>:

/* Receive one byte: busy waiting */
uint8_t USART_rx() {

	/* Wait until something arrive  */
	while (!(USART_0->UCSR_A & (1 << RXC0)));
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <USART_rx+0x4>

	return USART_0->UDR_;
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d8:	08 95       	ret

000000da <__vector_18>:
// Buffer circular na interrupção do Rx
// UDR envia 1 byte, salva no buffer circular.
// Novos dados vão sobre-escrevendo dados antigos quando atingem o tamanho limite do buffer.
// Variáveis "cabeça" e "cauda" para identificar o começo e o fim do dado sendo lido.

ISR(USART_RX_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
	
}
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <start_dht22>:
#include "dht22.h"


uint8_t start_dht22(){
	
	DHT_DDR |= (1 << DHT22_DDR);		//define como saída
  ee:	20 9a       	sbi	0x04, 0	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f eb       	ldi	r24, 0xBF	; 191
  f2:	92 e1       	ldi	r25, 0x12	; 18
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <start_dht22+0x6>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <start_dht22+0xc>
  fa:	00 00       	nop
	_delay_us(1200);
	DHT_DDR &=~ (1 << DHT22_DDR);		//define como entrada
  fc:	20 98       	cbi	0x04, 0	; 4
  fe:	87 ec       	ldi	r24, 0xC7	; 199
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <start_dht22+0x14>
 106:	00 c0       	rjmp	.+0      	; 0x108 <start_dht22+0x1a>
 108:	00 00       	nop
	_delay_us(50);
	if(!(DHT_PIN & (1 << DHT22_PIN))){
 10a:	83 b1       	in	r24, 0x03	; 3
 10c:	80 95       	com	r24
		return 1;
	}
	else {
		return 0;
	}
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <read_dht22>:

void read_dht22(uint16_t* humidity, uint16_t* temperature)
{
 112:	fc 01       	movw	r30, r24
 114:	db 01       	movw	r26, r22
	uint16_t temp = 0;
	uint8_t	 parity = 0;
	uint8_t parity_check = 0;
	uint8_t count = 0;
	
	while(!(DHT_PIN & (1 << DHT22_PIN)));
 116:	18 9b       	sbis	0x03, 0	; 3
 118:	fe cf       	rjmp	.-4      	; 0x116 <read_dht22+0x4>
	while(DHT_PIN & (1 << DHT22_PIN));
 11a:	18 99       	sbic	0x03, 0	; 3
 11c:	fe cf       	rjmp	.-4      	; 0x11a <read_dht22+0x8>
 11e:	90 e1       	ldi	r25, 0x10	; 16
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
	
	for(count = 0; count < 16; count ++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
 124:	18 9b       	sbis	0x03, 0	; 3
 126:	fe cf       	rjmp	.-4      	; 0x124 <read_dht22+0x12>
 128:	85 ed       	ldi	r24, 0xD5	; 213
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <read_dht22+0x18>
 12e:	00 00       	nop
		_delay_us(40);									//delay necessário para fazer a leitura no momento correto
		hum = (hum << 1);								//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
 134:	18 99       	sbic	0x03, 0	; 3
			hum|= 1;
 136:	21 60       	ori	r18, 0x01	; 1
		}
		else{
			hum |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
 138:	18 99       	sbic	0x03, 0	; 3
 13a:	fe cf       	rjmp	.-4      	; 0x138 <read_dht22+0x26>
 13c:	91 50       	subi	r25, 0x01	; 1
	uint8_t count = 0;
	
	while(!(DHT_PIN & (1 << DHT22_PIN)));
	while(DHT_PIN & (1 << DHT22_PIN));
	
	for(count = 0; count < 16; count ++){
 13e:	91 f7       	brne	.-28     	; 0x124 <read_dht22+0x12>
 140:	90 e1       	ldi	r25, 0x10	; 16
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	50 e0       	ldi	r21, 0x00	; 0
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
		
	}
	for(count = 0; count < 16; count ++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
 146:	18 9b       	sbis	0x03, 0	; 3
 148:	fe cf       	rjmp	.-4      	; 0x146 <read_dht22+0x34>
 14a:	85 ed       	ldi	r24, 0xD5	; 213
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <read_dht22+0x3a>
 150:	00 00       	nop
		_delay_us(40);
		temp = (temp << 1);								//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
 156:	18 99       	sbic	0x03, 0	; 3
			temp |= 1;
 158:	41 60       	ori	r20, 0x01	; 1
		}
		else{
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
 15a:	18 99       	sbic	0x03, 0	; 3
 15c:	fe cf       	rjmp	.-4      	; 0x15a <read_dht22+0x48>
 15e:	91 50       	subi	r25, 0x01	; 1
			hum |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
		
	}
	for(count = 0; count < 16; count ++){
 160:	91 f7       	brne	.-28     	; 0x146 <read_dht22+0x34>
 162:	98 e0       	ldi	r25, 0x08	; 8
 164:	70 e0       	ldi	r23, 0x00	; 0
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
	}
	for(count = 0; count < 8; count++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
 166:	18 9b       	sbis	0x03, 0	; 3
 168:	fe cf       	rjmp	.-4      	; 0x166 <read_dht22+0x54>
 16a:	85 ed       	ldi	r24, 0xD5	; 213
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <read_dht22+0x5a>
 170:	00 00       	nop
		_delay_us(40);									//delay necessário para fazer a leitura no momento correto
		parity = (parity << 1);							//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
 172:	77 0f       	add	r23, r23
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
 174:	18 99       	sbic	0x03, 0	; 3
			parity |= 1;
 176:	71 60       	ori	r23, 0x01	; 1
		}
		else{
			parity |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));			//espera enquanto ficar em high
 178:	18 99       	sbic	0x03, 0	; 3
 17a:	fe cf       	rjmp	.-4      	; 0x178 <read_dht22+0x66>
 17c:	91 50       	subi	r25, 0x01	; 1
		else{
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
	}
	for(count = 0; count < 8; count++){
 17e:	99 f7       	brne	.-26     	; 0x166 <read_dht22+0x54>
			parity |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));			//espera enquanto ficar em high
	}
	
	*temperature = temp;		
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	5c 93       	st	X, r21
 184:	4e 93       	st	-X, r20
	*humidity = hum;
 186:	31 83       	std	Z+1, r19	; 0x01
 188:	20 83       	st	Z, r18
	parity_check += temp;
	parity_check += (hum & (0xFF));
	hum = (hum >> 8);
	parity_check += hum;
	
	if(parity_check != parity){		//checa se a paridade é diferente, se for ele coloca 99.9 nos valores da saída, senão coloca o valor correto salvo previamente
 18a:	93 2f       	mov	r25, r19
 18c:	92 0f       	add	r25, r18
 18e:	94 0f       	add	r25, r20
 190:	95 0f       	add	r25, r21
 192:	79 17       	cp	r23, r25
 194:	31 f0       	breq	.+12     	; 0x1a2 <read_dht22+0x90>
		*temperature = 999;
 196:	87 ee       	ldi	r24, 0xE7	; 231
 198:	93 e0       	ldi	r25, 0x03	; 3
 19a:	8d 93       	st	X+, r24
 19c:	9c 93       	st	X, r25
		*humidity = 999;
 19e:	91 83       	std	Z+1, r25	; 0x01
 1a0:	80 83       	st	Z, r24
 1a2:	08 95       	ret

000001a4 <inic_stream>:
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	08 95       	ret

000001aa <cmd_LCD>:
 1aa:	61 11       	cpse	r22, r1
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <cmd_LCD+0x8>
 1ae:	5c 98       	cbi	0x0b, 4	; 11
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <cmd_LCD+0xa>
 1b2:	5c 9a       	sbi	0x0b, 4	; 11
 1b4:	9b b1       	in	r25, 0x0b	; 11
 1b6:	90 7f       	andi	r25, 0xF0	; 240
 1b8:	28 2f       	mov	r18, r24
 1ba:	22 95       	swap	r18
 1bc:	2f 70       	andi	r18, 0x0F	; 15
 1be:	92 2b       	or	r25, r18
 1c0:	9b b9       	out	0x0b, r25	; 11
 1c2:	95 e0       	ldi	r25, 0x05	; 5
 1c4:	9a 95       	dec	r25
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <cmd_LCD+0x1a>
 1c8:	00 00       	nop
 1ca:	5d 9a       	sbi	0x0b, 5	; 11
 1cc:	95 e0       	ldi	r25, 0x05	; 5
 1ce:	9a 95       	dec	r25
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <cmd_LCD+0x24>
 1d2:	00 00       	nop
 1d4:	5d 98       	cbi	0x0b, 5	; 11
 1d6:	90 ef       	ldi	r25, 0xF0	; 240
 1d8:	9a 95       	dec	r25
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <cmd_LCD+0x2e>
 1dc:	9b b1       	in	r25, 0x0b	; 11
 1de:	90 7f       	andi	r25, 0xF0	; 240
 1e0:	28 2f       	mov	r18, r24
 1e2:	2f 70       	andi	r18, 0x0F	; 15
 1e4:	92 2b       	or	r25, r18
 1e6:	9b b9       	out	0x0b, r25	; 11
 1e8:	95 e0       	ldi	r25, 0x05	; 5
 1ea:	9a 95       	dec	r25
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <cmd_LCD+0x40>
 1ee:	00 00       	nop
 1f0:	5d 9a       	sbi	0x0b, 5	; 11
 1f2:	95 e0       	ldi	r25, 0x05	; 5
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <cmd_LCD+0x4a>
 1f8:	00 00       	nop
 1fa:	5d 98       	cbi	0x0b, 5	; 11
 1fc:	90 ef       	ldi	r25, 0xF0	; 240
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <cmd_LCD+0x54>
 202:	61 11       	cpse	r22, r1
 204:	08 c0       	rjmp	.+16     	; 0x216 <cmd_LCD+0x6c>
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	30 f4       	brcc	.+12     	; 0x216 <cmd_LCD+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8f e3       	ldi	r24, 0x3F	; 63
 20c:	9f e1       	ldi	r25, 0x1F	; 31
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <cmd_LCD+0x64>
 212:	00 c0       	rjmp	.+0      	; 0x214 <cmd_LCD+0x6a>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <lcd_putchar>:
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <cmd_LCD>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret

00000224 <inic_LCD_4bits>:
 224:	54 9a       	sbi	0x0a, 4	; 10
 226:	55 9a       	sbi	0x0a, 5	; 10
 228:	8a b1       	in	r24, 0x0a	; 10
 22a:	8f 60       	ori	r24, 0x0F	; 15
 22c:	8a b9       	out	0x0a, r24	; 10
 22e:	5c 98       	cbi	0x0b, 4	; 11
 230:	5d 98       	cbi	0x0b, 5	; 11
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	89 ef       	ldi	r24, 0xF9	; 249
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <inic_LCD_4bits+0x14>
 240:	00 c0       	rjmp	.+0      	; 0x242 <inic_LCD_4bits+0x1e>
 242:	00 00       	nop
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	80 7f       	andi	r24, 0xF0	; 240
 248:	83 60       	ori	r24, 0x03	; 3
 24a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	25 e0       	ldi	r18, 0x05	; 5
 24e:	2a 95       	dec	r18
 250:	f1 f7       	brne	.-4      	; 0x24e <inic_LCD_4bits+0x2a>
 252:	00 00       	nop
 254:	5d 9a       	sbi	0x0b, 5	; 11
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	8a 95       	dec	r24
 25a:	f1 f7       	brne	.-4      	; 0x258 <inic_LCD_4bits+0x34>
 25c:	00 00       	nop
 25e:	5d 98       	cbi	0x0b, 5	; 11
 260:	90 ef       	ldi	r25, 0xF0	; 240
 262:	9a 95       	dec	r25
 264:	f1 f7       	brne	.-4      	; 0x262 <inic_LCD_4bits+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	9e e4       	ldi	r25, 0x4E	; 78
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <inic_LCD_4bits+0x46>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <inic_LCD_4bits+0x4c>
 270:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	95 e0       	ldi	r25, 0x05	; 5
 274:	9a 95       	dec	r25
 276:	f1 f7       	brne	.-4      	; 0x274 <inic_LCD_4bits+0x50>
 278:	00 00       	nop
 27a:	5d 9a       	sbi	0x0b, 5	; 11
 27c:	25 e0       	ldi	r18, 0x05	; 5
 27e:	2a 95       	dec	r18
 280:	f1 f7       	brne	.-4      	; 0x27e <inic_LCD_4bits+0x5a>
 282:	00 00       	nop
 284:	5d 98       	cbi	0x0b, 5	; 11
 286:	80 ef       	ldi	r24, 0xF0	; 240
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <inic_LCD_4bits+0x64>
 28c:	8f e1       	ldi	r24, 0x1F	; 31
 28e:	93 e0       	ldi	r25, 0x03	; 3
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <inic_LCD_4bits+0x6c>
 294:	00 c0       	rjmp	.+0      	; 0x296 <inic_LCD_4bits+0x72>
 296:	00 00       	nop
 298:	95 e0       	ldi	r25, 0x05	; 5
 29a:	9a 95       	dec	r25
 29c:	f1 f7       	brne	.-4      	; 0x29a <inic_LCD_4bits+0x76>
 29e:	00 00       	nop
 2a0:	5d 9a       	sbi	0x0b, 5	; 11
 2a2:	25 e0       	ldi	r18, 0x05	; 5
 2a4:	2a 95       	dec	r18
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <inic_LCD_4bits+0x80>
 2a8:	00 00       	nop
 2aa:	5d 98       	cbi	0x0b, 5	; 11
 2ac:	80 ef       	ldi	r24, 0xF0	; 240
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <inic_LCD_4bits+0x8a>
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	8b b9       	out	0x0b, r24	; 11
 2ba:	95 e0       	ldi	r25, 0x05	; 5
 2bc:	9a 95       	dec	r25
 2be:	f1 f7       	brne	.-4      	; 0x2bc <inic_LCD_4bits+0x98>
 2c0:	00 00       	nop
 2c2:	5d 9a       	sbi	0x0b, 5	; 11
 2c4:	25 e0       	ldi	r18, 0x05	; 5
 2c6:	2a 95       	dec	r18
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <inic_LCD_4bits+0xa2>
 2ca:	00 00       	nop
 2cc:	5d 98       	cbi	0x0b, 5	; 11
 2ce:	80 ef       	ldi	r24, 0xF0	; 240
 2d0:	8a 95       	dec	r24
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <inic_LCD_4bits+0xac>
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	88 e2       	ldi	r24, 0x28	; 40
 2d8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <cmd_LCD>
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	88 e0       	ldi	r24, 0x08	; 8
 2e0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <cmd_LCD>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <cmd_LCD>
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
 2f0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <cmd_LCD>
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 e8       	ldi	r24, 0x80	; 128
 2f8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <cmd_LCD>
 2fc:	08 95       	ret

000002fe <CRC16_2>:
uint16_t little_to_big(uint16_t input)
{
	uint16_t output;
	output = (input >> 8) + (input << 8);	// Deslocando os bits para a ordem correta do Modbus
	return output;
}
 2fe:	16 16       	cp	r1, r22
 300:	17 06       	cpc	r1, r23
 302:	0c f5       	brge	.+66     	; 0x346 <CRC16_2+0x48>
 304:	fc 01       	movw	r30, r24
 306:	68 0f       	add	r22, r24
 308:	79 1f       	adc	r23, r25
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	9f ef       	ldi	r25, 0xFF	; 255
 30e:	a0 e0       	ldi	r26, 0x00	; 0
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	21 91       	ld	r18, Z+
 314:	82 27       	eor	r24, r18
 316:	28 e0       	ldi	r18, 0x08	; 8
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	80 ff       	sbrs	r24, 0
 31c:	09 c0       	rjmp	.+18     	; 0x330 <CRC16_2+0x32>
 31e:	b6 95       	lsr	r27
 320:	a7 95       	ror	r26
 322:	97 95       	ror	r25
 324:	87 95       	ror	r24
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	84 27       	eor	r24, r20
 32a:	40 ea       	ldi	r20, 0xA0	; 160
 32c:	94 27       	eor	r25, r20
 32e:	04 c0       	rjmp	.+8      	; 0x338 <CRC16_2+0x3a>
 330:	b6 95       	lsr	r27
 332:	a7 95       	ror	r26
 334:	97 95       	ror	r25
 336:	87 95       	ror	r24
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	31 09       	sbc	r19, r1
 33c:	71 f7       	brne	.-36     	; 0x31a <CRC16_2+0x1c>
 33e:	e6 17       	cp	r30, r22
 340:	f7 07       	cpc	r31, r23
 342:	39 f7       	brne	.-50     	; 0x312 <CRC16_2+0x14>
 344:	08 95       	ret
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	9f ef       	ldi	r25, 0xFF	; 255
 34a:	a0 e0       	ldi	r26, 0x00	; 0
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	08 95       	ret

00000350 <main>:

int main(void)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	2c 97       	sbiw	r28, 0x0c	; 12
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
	modbus_pkg_t tx_pkg;	 // Dados que serão enviados ao Modbus
	modbus_pkg_t rx_pkg;	 // Dados que o Modbus me retornará (deverão ser os mesmos)
	FILE* lcd = 0;
	FILE* usart = 0;
	uint16_t humidity = 0;
 364:	1a 86       	std	Y+10, r1	; 0x0a
 366:	19 86       	std	Y+9, r1	; 0x09
	uint16_t temperature = 0;
 368:	1c 86       	std	Y+12, r1	; 0x0c
 36a:	1b 86       	std	Y+11, r1	; 0x0b
	inic_LCD_4bits();
 36c:	0e 94 12 01 	call	0x224	; 0x224 <inic_LCD_4bits>
	lcd = inic_stream();
 370:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <inic_stream>
	usart = get_usart_stream();
 374:	0e 94 4b 00 	call	0x96	; 0x96 <get_usart_stream>
 378:	7c 01       	movw	r14, r24
	USART_Init(B9600);
 37a:	87 e6       	ldi	r24, 0x67	; 103
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 4e 00 	call	0x9c	; 0x9c <USART_Init>
	sei();
 382:	78 94       	sei
	while (1) 
    {
		if(start_dht22() == 1){
			read_dht22(&humidity, &temperature);
		}	
		tx_pkg.addr = 0x15;
 384:	0f 2e       	mov	r0, r31
 386:	f5 e1       	ldi	r31, 0x15	; 21
 388:	9f 2e       	mov	r9, r31
 38a:	f0 2d       	mov	r31, r0
		tx_pkg.cmd  = 0x01;
 38c:	01 e0       	ldi	r16, 0x01	; 1
		tx_pkg.reg  = 0x0500;	// Big Endian
 38e:	0f 2e       	mov	r0, r31
 390:	a1 2c       	mov	r10, r1
 392:	f5 e0       	ldi	r31, 0x05	; 5
 394:	bf 2e       	mov	r11, r31
 396:	f0 2d       	mov	r31, r0
			//fprintf(usart, "%x\r\n", buffer[x]);
		}

		tx_pkg.addr = 0x15;
		tx_pkg.cmd  = 0x01;
		tx_pkg.reg  = 0x0600;	// Big Endian
 398:	0f 2e       	mov	r0, r31
 39a:	c1 2c       	mov	r12, r1
 39c:	f6 e0       	ldi	r31, 0x06	; 6
 39e:	df 2e       	mov	r13, r31
 3a0:	f0 2d       	mov	r31, r0
	//   1200 inicial + 50 para leitura de low + 130 de espera até resposta + (120*40)
	//   tempo máximo de leitura do bit vezes a quantidade de bits = 6180 uS
	//   topo 124, timer0, prescaler 1024
	while (1) 
    {
		if(start_dht22() == 1){
 3a2:	0e 94 77 00 	call	0xee	; 0xee <start_dht22>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	39 f4       	brne	.+14     	; 0x3b8 <main+0x68>
			read_dht22(&humidity, &temperature);
 3aa:	be 01       	movw	r22, r28
 3ac:	65 5f       	subi	r22, 0xF5	; 245
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	ce 01       	movw	r24, r28
 3b2:	09 96       	adiw	r24, 0x09	; 9
 3b4:	0e 94 89 00 	call	0x112	; 0x112 <read_dht22>
		}	
		tx_pkg.addr = 0x15;
 3b8:	99 82       	std	Y+1, r9	; 0x01
		tx_pkg.cmd  = 0x01;
 3ba:	0a 83       	std	Y+2, r16	; 0x02
		tx_pkg.reg  = 0x0500;	// Big Endian
 3bc:	bc 82       	std	Y+4, r11	; 0x04
 3be:	ab 82       	std	Y+3, r10	; 0x03
		tx_pkg.data = little_to_big(temperature);
 3c0:	8b 85       	ldd	r24, Y+11	; 0x0b
 3c2:	9c 85       	ldd	r25, Y+12	; 0x0c
 3c4:	98 27       	eor	r25, r24
 3c6:	89 27       	eor	r24, r25
 3c8:	98 27       	eor	r25, r24
 3ca:	9e 83       	std	Y+6, r25	; 0x06
 3cc:	8d 83       	std	Y+5, r24	; 0x05
		tx_pkg.crc  = CRC16_2((uint8_t*)&tx_pkg, 6);
 3ce:	66 e0       	ldi	r22, 0x06	; 6
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <CRC16_2>
 3da:	98 87       	std	Y+8, r25	; 0x08
 3dc:	8f 83       	std	Y+7, r24	; 0x07

		fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);		//envio do pacote
 3de:	97 01       	movw	r18, r14
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	68 e0       	ldi	r22, 0x08	; 8
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	0e 94 28 02 	call	0x450	; 0x450 <fwrite>
 3f0:	18 e0       	ldi	r17, 0x08	; 8
		
		for(x = 0; x < 8; x++){
			buffer[x] = USART_rx();
 3f2:	0e 94 65 00 	call	0xca	; 0xca <USART_rx>
 3f6:	11 50       	subi	r17, 0x01	; 1
		tx_pkg.data = little_to_big(temperature);
		tx_pkg.crc  = CRC16_2((uint8_t*)&tx_pkg, 6);

		fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);		//envio do pacote
		
		for(x = 0; x < 8; x++){
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <main+0xa2>
			buffer[x] = USART_rx();
			//fprintf(usart, "%x\r\n", buffer[x]);
		}

		tx_pkg.addr = 0x15;
 3fa:	99 82       	std	Y+1, r9	; 0x01
		tx_pkg.cmd  = 0x01;
 3fc:	0a 83       	std	Y+2, r16	; 0x02
		tx_pkg.reg  = 0x0600;	// Big Endian
 3fe:	dc 82       	std	Y+4, r13	; 0x04
 400:	cb 82       	std	Y+3, r12	; 0x03
		tx_pkg.data = little_to_big(humidity);
 402:	89 85       	ldd	r24, Y+9	; 0x09
 404:	9a 85       	ldd	r25, Y+10	; 0x0a
 406:	98 27       	eor	r25, r24
 408:	89 27       	eor	r24, r25
 40a:	98 27       	eor	r25, r24
 40c:	9e 83       	std	Y+6, r25	; 0x06
 40e:	8d 83       	std	Y+5, r24	; 0x05
		tx_pkg.crc  = CRC16_2(&tx_pkg, 6);	// Endereço do pacote e quantos bytes são para o cálculo
 410:	66 e0       	ldi	r22, 0x06	; 6
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	ce 01       	movw	r24, r28
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	0e 94 7f 01 	call	0x2fe	; 0x2fe <CRC16_2>
 41c:	98 87       	std	Y+8, r25	; 0x08
 41e:	8f 83       	std	Y+7, r24	; 0x07
		
		fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);		//envio do pacote
 420:	97 01       	movw	r18, r14
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	68 e0       	ldi	r22, 0x08	; 8
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	0e 94 28 02 	call	0x450	; 0x450 <fwrite>
 432:	18 e0       	ldi	r17, 0x08	; 8

		for(x = 0; x < 8; x++){
			buffer[x] = USART_rx();
 434:	0e 94 65 00 	call	0xca	; 0xca <USART_rx>
 438:	11 50       	subi	r17, 0x01	; 1
		tx_pkg.data = little_to_big(humidity);
		tx_pkg.crc  = CRC16_2(&tx_pkg, 6);	// Endereço do pacote e quantos bytes são para o cálculo
		
		fwrite(&tx_pkg, sizeof(tx_pkg), 1, usart);		//envio do pacote

		for(x = 0; x < 8; x++){
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43c:	2f ef       	ldi	r18, 0xFF	; 255
 43e:	83 ed       	ldi	r24, 0xD3	; 211
 440:	90 e3       	ldi	r25, 0x30	; 48
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
 44e:	a9 cf       	rjmp	.-174    	; 0x3a2 <main+0x52>

00000450 <fwrite>:
 450:	a0 e0       	ldi	r26, 0x00	; 0
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	ee e2       	ldi	r30, 0x2E	; 46
 456:	f2 e0       	ldi	r31, 0x02	; 2
 458:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__prologue_saves__+0xc>
 45c:	5b 01       	movw	r10, r22
 45e:	4a 01       	movw	r8, r20
 460:	79 01       	movw	r14, r18
 462:	d9 01       	movw	r26, r18
 464:	13 96       	adiw	r26, 0x03	; 3
 466:	2c 91       	ld	r18, X
 468:	21 ff       	sbrs	r18, 1
 46a:	1d c0       	rjmp	.+58     	; 0x4a6 <fwrite+0x56>
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	d0 e0       	ldi	r29, 0x00	; 0
 470:	c8 15       	cp	r28, r8
 472:	d9 05       	cpc	r29, r9
 474:	d9 f0       	breq	.+54     	; 0x4ac <fwrite+0x5c>
 476:	8c 01       	movw	r16, r24
 478:	6c 01       	movw	r12, r24
 47a:	ca 0c       	add	r12, r10
 47c:	db 1c       	adc	r13, r11
 47e:	c8 01       	movw	r24, r16
 480:	0c 15       	cp	r16, r12
 482:	1d 05       	cpc	r17, r13
 484:	71 f0       	breq	.+28     	; 0x4a2 <fwrite+0x52>
 486:	0f 5f       	subi	r16, 0xFF	; 255
 488:	1f 4f       	sbci	r17, 0xFF	; 255
 48a:	d7 01       	movw	r26, r14
 48c:	18 96       	adiw	r26, 0x08	; 8
 48e:	ed 91       	ld	r30, X+
 490:	fc 91       	ld	r31, X
 492:	19 97       	sbiw	r26, 0x09	; 9
 494:	b7 01       	movw	r22, r14
 496:	dc 01       	movw	r26, r24
 498:	8c 91       	ld	r24, X
 49a:	09 95       	icall
 49c:	89 2b       	or	r24, r25
 49e:	79 f3       	breq	.-34     	; 0x47e <fwrite+0x2e>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <fwrite+0x5c>
 4a2:	21 96       	adiw	r28, 0x01	; 1
 4a4:	e5 cf       	rjmp	.-54     	; 0x470 <fwrite+0x20>
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <fwrite+0x5e>
 4ac:	ce 01       	movw	r24, r28
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	ec e0       	ldi	r30, 0x0C	; 12
 4b4:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__epilogue_restores__+0xc>

000004b8 <__prologue_saves__>:
 4b8:	2f 92       	push	r2
 4ba:	3f 92       	push	r3
 4bc:	4f 92       	push	r4
 4be:	5f 92       	push	r5
 4c0:	6f 92       	push	r6
 4c2:	7f 92       	push	r7
 4c4:	8f 92       	push	r8
 4c6:	9f 92       	push	r9
 4c8:	af 92       	push	r10
 4ca:	bf 92       	push	r11
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
 4e0:	ca 1b       	sub	r28, r26
 4e2:	db 0b       	sbc	r29, r27
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
 4ee:	09 94       	ijmp

000004f0 <__epilogue_restores__>:
 4f0:	2a 88       	ldd	r2, Y+18	; 0x12
 4f2:	39 88       	ldd	r3, Y+17	; 0x11
 4f4:	48 88       	ldd	r4, Y+16	; 0x10
 4f6:	5f 84       	ldd	r5, Y+15	; 0x0f
 4f8:	6e 84       	ldd	r6, Y+14	; 0x0e
 4fa:	7d 84       	ldd	r7, Y+13	; 0x0d
 4fc:	8c 84       	ldd	r8, Y+12	; 0x0c
 4fe:	9b 84       	ldd	r9, Y+11	; 0x0b
 500:	aa 84       	ldd	r10, Y+10	; 0x0a
 502:	b9 84       	ldd	r11, Y+9	; 0x09
 504:	c8 84       	ldd	r12, Y+8	; 0x08
 506:	df 80       	ldd	r13, Y+7	; 0x07
 508:	ee 80       	ldd	r14, Y+6	; 0x06
 50a:	fd 80       	ldd	r15, Y+5	; 0x05
 50c:	0c 81       	ldd	r16, Y+4	; 0x04
 50e:	1b 81       	ldd	r17, Y+3	; 0x03
 510:	aa 81       	ldd	r26, Y+2	; 0x02
 512:	b9 81       	ldd	r27, Y+1	; 0x01
 514:	ce 0f       	add	r28, r30
 516:	d1 1d       	adc	r29, r1
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	ed 01       	movw	r28, r26
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
