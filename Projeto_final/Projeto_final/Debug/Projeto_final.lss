
Projeto_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000009ac  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000148d  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ae3  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000840  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00003328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051e  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b08  00000000  00000000  0000394a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00004452  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  8e:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <start_dht22>:
#include "dht22.h"


uint8_t start_dht22(){
	
	DHT_DDR |= (1 << DHT22_DDR);		//define como saída
  96:	20 9a       	sbi	0x04, 0	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8f eb       	ldi	r24, 0xBF	; 191
  9a:	92 e1       	ldi	r25, 0x12	; 18
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <start_dht22+0x6>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <start_dht22+0xc>
  a2:	00 00       	nop
	_delay_us(1200);
	DHT_DDR &=~ (1 << DHT22_DDR);		//define como entrada
  a4:	20 98       	cbi	0x04, 0	; 4
  a6:	87 ec       	ldi	r24, 0xC7	; 199
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <start_dht22+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <start_dht22+0x1a>
  b0:	00 00       	nop
	_delay_us(50);
	if(!(DHT_PIN & (1 << DHT22_PIN))){
  b2:	83 b1       	in	r24, 0x03	; 3
  b4:	80 95       	com	r24
	}
	else
	{
		return 0;
	}
}
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	08 95       	ret

000000ba <read_dht22>:

void read_dht22(uint16_t* humidity, uint16_t* temperature)
{
  ba:	fc 01       	movw	r30, r24
  bc:	db 01       	movw	r26, r22
	uint16_t temp = 0;
	uint8_t	 parity = 0;
	uint8_t parity_check = 0;
	uint8_t count = 0;
	
	while(!(DHT_PIN & (1 << DHT22_PIN)));
  be:	18 9b       	sbis	0x03, 0	; 3
  c0:	fe cf       	rjmp	.-4      	; 0xbe <read_dht22+0x4>
	while(DHT_PIN & (1 << DHT22_PIN));
  c2:	18 99       	sbic	0x03, 0	; 3
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <read_dht22+0x8>
  c6:	90 e1       	ldi	r25, 0x10	; 16
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
	
	for(count = 0; count < 16; count ++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
  cc:	18 9b       	sbis	0x03, 0	; 3
  ce:	fe cf       	rjmp	.-4      	; 0xcc <read_dht22+0x12>
  d0:	85 ed       	ldi	r24, 0xD5	; 213
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <read_dht22+0x18>
  d6:	00 00       	nop
		_delay_us(40);									//delay necessário para fazer a leitura no momento correto
		hum = (hum << 1);								//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
  dc:	18 99       	sbic	0x03, 0	; 3
			hum|= 1;
  de:	21 60       	ori	r18, 0x01	; 1
		}
		else{
			hum |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
  e0:	18 99       	sbic	0x03, 0	; 3
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <read_dht22+0x26>
  e4:	91 50       	subi	r25, 0x01	; 1
	uint8_t count = 0;
	
	while(!(DHT_PIN & (1 << DHT22_PIN)));
	while(DHT_PIN & (1 << DHT22_PIN));
	
	for(count = 0; count < 16; count ++){
  e6:	91 f7       	brne	.-28     	; 0xcc <read_dht22+0x12>
  e8:	90 e1       	ldi	r25, 0x10	; 16
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	50 e0       	ldi	r21, 0x00	; 0
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
		
	}
	for(count = 0; count < 16; count ++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
  ee:	18 9b       	sbis	0x03, 0	; 3
  f0:	fe cf       	rjmp	.-4      	; 0xee <read_dht22+0x34>
  f2:	85 ed       	ldi	r24, 0xD5	; 213
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <read_dht22+0x3a>
  f8:	00 00       	nop
		_delay_us(40);
		temp = (temp << 1);								//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
  fe:	18 99       	sbic	0x03, 0	; 3
			temp |= 1;
 100:	41 60       	ori	r20, 0x01	; 1
		}
		else{
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
 102:	18 99       	sbic	0x03, 0	; 3
 104:	fe cf       	rjmp	.-4      	; 0x102 <read_dht22+0x48>
 106:	91 50       	subi	r25, 0x01	; 1
			hum |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
		
	}
	for(count = 0; count < 16; count ++){
 108:	91 f7       	brne	.-28     	; 0xee <read_dht22+0x34>
 10a:	98 e0       	ldi	r25, 0x08	; 8
 10c:	70 e0       	ldi	r23, 0x00	; 0
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
	}
	for(count = 0; count < 8; count++){
		while(!(DHT_PIN & (1 << DHT22_PIN)));			//espera enquanto o pino está em low
 10e:	18 9b       	sbis	0x03, 0	; 3
 110:	fe cf       	rjmp	.-4      	; 0x10e <read_dht22+0x54>
 112:	85 ed       	ldi	r24, 0xD5	; 213
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <read_dht22+0x5a>
 118:	00 00       	nop
		_delay_us(40);									//delay necessário para fazer a leitura no momento correto
		parity = (parity << 1);							//pega o numero atual e desloca a esquerda pra que a leitura fique na posição correta;
 11a:	77 0f       	add	r23, r23
		if(DHT_PIN & (1 << DHT22_PIN)){					//checagem do pino
 11c:	18 99       	sbic	0x03, 0	; 3
			parity |= 1;
 11e:	71 60       	ori	r23, 0x01	; 1
		}
		else{
			parity |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));			//espera enquanto ficar em high
 120:	18 99       	sbic	0x03, 0	; 3
 122:	fe cf       	rjmp	.-4      	; 0x120 <read_dht22+0x66>
 124:	91 50       	subi	r25, 0x01	; 1
		else{
			temp |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));				//espera enquanto ficar em high
	}
	for(count = 0; count < 8; count++){
 126:	99 f7       	brne	.-26     	; 0x10e <read_dht22+0x54>
			parity |= 0;
		}
		while(DHT_PIN & (1 << DHT22_PIN));			//espera enquanto ficar em high
	}
	
	*temperature = temp;		
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	5c 93       	st	X, r21
 12c:	4e 93       	st	-X, r20
	*humidity = hum;
 12e:	31 83       	std	Z+1, r19	; 0x01
 130:	20 83       	st	Z, r18
	parity_check += temp;
	parity_check += (hum & (0xFF));
	hum = (hum >> 8);
	parity_check += hum;
	
	if(parity_check != parity){		//checa se a paridade é diferente, se for ele coloca 99.9 nos valores da saída, senão coloca o valor correto salvo previamente
 132:	93 2f       	mov	r25, r19
 134:	92 0f       	add	r25, r18
 136:	94 0f       	add	r25, r20
 138:	95 0f       	add	r25, r21
 13a:	79 17       	cp	r23, r25
 13c:	31 f0       	breq	.+12     	; 0x14a <read_dht22+0x90>
		*temperature = 999;
 13e:	87 ee       	ldi	r24, 0xE7	; 231
 140:	93 e0       	ldi	r25, 0x03	; 3
 142:	8d 93       	st	X+, r24
 144:	9c 93       	st	X, r25
		*humidity = 999;
 146:	91 83       	std	Z+1, r25	; 0x01
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <inic_stream>:
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	08 95       	ret

00000152 <cmd_LCD>:
 152:	61 11       	cpse	r22, r1
 154:	02 c0       	rjmp	.+4      	; 0x15a <cmd_LCD+0x8>
 156:	5c 98       	cbi	0x0b, 4	; 11
 158:	01 c0       	rjmp	.+2      	; 0x15c <cmd_LCD+0xa>
 15a:	5c 9a       	sbi	0x0b, 4	; 11
 15c:	9b b1       	in	r25, 0x0b	; 11
 15e:	90 7f       	andi	r25, 0xF0	; 240
 160:	28 2f       	mov	r18, r24
 162:	22 95       	swap	r18
 164:	2f 70       	andi	r18, 0x0F	; 15
 166:	92 2b       	or	r25, r18
 168:	9b b9       	out	0x0b, r25	; 11
 16a:	95 e0       	ldi	r25, 0x05	; 5
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <cmd_LCD+0x1a>
 170:	00 00       	nop
 172:	5d 9a       	sbi	0x0b, 5	; 11
 174:	95 e0       	ldi	r25, 0x05	; 5
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <cmd_LCD+0x24>
 17a:	00 00       	nop
 17c:	5d 98       	cbi	0x0b, 5	; 11
 17e:	90 ef       	ldi	r25, 0xF0	; 240
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <cmd_LCD+0x2e>
 184:	9b b1       	in	r25, 0x0b	; 11
 186:	90 7f       	andi	r25, 0xF0	; 240
 188:	28 2f       	mov	r18, r24
 18a:	2f 70       	andi	r18, 0x0F	; 15
 18c:	92 2b       	or	r25, r18
 18e:	9b b9       	out	0x0b, r25	; 11
 190:	95 e0       	ldi	r25, 0x05	; 5
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <cmd_LCD+0x40>
 196:	00 00       	nop
 198:	5d 9a       	sbi	0x0b, 5	; 11
 19a:	95 e0       	ldi	r25, 0x05	; 5
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <cmd_LCD+0x4a>
 1a0:	00 00       	nop
 1a2:	5d 98       	cbi	0x0b, 5	; 11
 1a4:	90 ef       	ldi	r25, 0xF0	; 240
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <cmd_LCD+0x54>
 1aa:	61 11       	cpse	r22, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <cmd_LCD+0x6c>
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	30 f4       	brcc	.+12     	; 0x1be <cmd_LCD+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9f e1       	ldi	r25, 0x1F	; 31
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <cmd_LCD+0x64>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <cmd_LCD+0x6a>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <lcd_putchar>:
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	0e 94 a9 00 	call	0x152	; 0x152 <cmd_LCD>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret

000001cc <inic_LCD_4bits>:
 1cc:	54 9a       	sbi	0x0a, 4	; 10
 1ce:	55 9a       	sbi	0x0a, 5	; 10
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	8f 60       	ori	r24, 0x0F	; 15
 1d4:	8a b9       	out	0x0a, r24	; 10
 1d6:	5c 98       	cbi	0x0b, 4	; 11
 1d8:	5d 98       	cbi	0x0b, 5	; 11
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	89 ef       	ldi	r24, 0xF9	; 249
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <inic_LCD_4bits+0x14>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <inic_LCD_4bits+0x1e>
 1ea:	00 00       	nop
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	83 60       	ori	r24, 0x03	; 3
 1f2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	25 e0       	ldi	r18, 0x05	; 5
 1f6:	2a 95       	dec	r18
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <inic_LCD_4bits+0x2a>
 1fa:	00 00       	nop
 1fc:	5d 9a       	sbi	0x0b, 5	; 11
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <inic_LCD_4bits+0x34>
 204:	00 00       	nop
 206:	5d 98       	cbi	0x0b, 5	; 11
 208:	90 ef       	ldi	r25, 0xF0	; 240
 20a:	9a 95       	dec	r25
 20c:	f1 f7       	brne	.-4      	; 0x20a <inic_LCD_4bits+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <inic_LCD_4bits+0x46>
 216:	00 c0       	rjmp	.+0      	; 0x218 <inic_LCD_4bits+0x4c>
 218:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	95 e0       	ldi	r25, 0x05	; 5
 21c:	9a 95       	dec	r25
 21e:	f1 f7       	brne	.-4      	; 0x21c <inic_LCD_4bits+0x50>
 220:	00 00       	nop
 222:	5d 9a       	sbi	0x0b, 5	; 11
 224:	25 e0       	ldi	r18, 0x05	; 5
 226:	2a 95       	dec	r18
 228:	f1 f7       	brne	.-4      	; 0x226 <inic_LCD_4bits+0x5a>
 22a:	00 00       	nop
 22c:	5d 98       	cbi	0x0b, 5	; 11
 22e:	80 ef       	ldi	r24, 0xF0	; 240
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <inic_LCD_4bits+0x64>
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <inic_LCD_4bits+0x6c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <inic_LCD_4bits+0x72>
 23e:	00 00       	nop
 240:	95 e0       	ldi	r25, 0x05	; 5
 242:	9a 95       	dec	r25
 244:	f1 f7       	brne	.-4      	; 0x242 <inic_LCD_4bits+0x76>
 246:	00 00       	nop
 248:	5d 9a       	sbi	0x0b, 5	; 11
 24a:	25 e0       	ldi	r18, 0x05	; 5
 24c:	2a 95       	dec	r18
 24e:	f1 f7       	brne	.-4      	; 0x24c <inic_LCD_4bits+0x80>
 250:	00 00       	nop
 252:	5d 98       	cbi	0x0b, 5	; 11
 254:	80 ef       	ldi	r24, 0xF0	; 240
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <inic_LCD_4bits+0x8a>
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	8b b9       	out	0x0b, r24	; 11
 262:	95 e0       	ldi	r25, 0x05	; 5
 264:	9a 95       	dec	r25
 266:	f1 f7       	brne	.-4      	; 0x264 <inic_LCD_4bits+0x98>
 268:	00 00       	nop
 26a:	5d 9a       	sbi	0x0b, 5	; 11
 26c:	25 e0       	ldi	r18, 0x05	; 5
 26e:	2a 95       	dec	r18
 270:	f1 f7       	brne	.-4      	; 0x26e <inic_LCD_4bits+0xa2>
 272:	00 00       	nop
 274:	5d 98       	cbi	0x0b, 5	; 11
 276:	80 ef       	ldi	r24, 0xF0	; 240
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <inic_LCD_4bits+0xac>
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	88 e2       	ldi	r24, 0x28	; 40
 280:	0e 94 a9 00 	call	0x152	; 0x152 <cmd_LCD>
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	0e 94 a9 00 	call	0x152	; 0x152 <cmd_LCD>
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 a9 00 	call	0x152	; 0x152 <cmd_LCD>
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	8c e0       	ldi	r24, 0x0C	; 12
 298:	0e 94 a9 00 	call	0x152	; 0x152 <cmd_LCD>
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 a9 00 	call	0x152	; 0x152 <cmd_LCD>
 2a4:	08 95       	ret

000002a6 <main>:
	
}


int main(void)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <main+0x6>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <main+0x8>
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
	FILE* lcd = 0;
	uint16_t humidity = 0;
 2b2:	1a 82       	std	Y+2, r1	; 0x02
 2b4:	19 82       	std	Y+1, r1	; 0x01
	uint16_t temperature = 0;
 2b6:	1c 82       	std	Y+4, r1	; 0x04
 2b8:	1b 82       	std	Y+3, r1	; 0x03
	inic_LCD_4bits();
 2ba:	0e 94 e6 00 	call	0x1cc	; 0x1cc <inic_LCD_4bits>
	lcd = inic_stream();
 2be:	0e 94 a6 00 	call	0x14c	; 0x14c <inic_stream>
 2c2:	c8 2e       	mov	r12, r24
 2c4:	d9 2e       	mov	r13, r25
			read_dht22(&humidity, &temperature);
		}
		
		//mostra os valores de temperatura e humidade
		cmd_LCD(1,0);
		fprintf(lcd, "temp:%d,%d",(temperature/10),(temperature%10));
 2c6:	0f 2e       	mov	r0, r31
 2c8:	fe e0       	ldi	r31, 0x0E	; 14
 2ca:	ef 2e       	mov	r14, r31
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	ff 2e       	mov	r15, r31
 2d0:	f0 2d       	mov	r31, r0
		cmd_LCD(0xC0, 0);
		fprintf(lcd, "hum:%d,%d",(humidity/10),(humidity%10));
 2d2:	09 e1       	ldi	r16, 0x19	; 25
 2d4:	11 e0       	ldi	r17, 0x01	; 1
	
	//tempo calculado para timeout ->  1200 inicial + 50 para leitura de low + 130 de espera até resposta + (120*40), tempo maximo de leitura do bit vezes a quantidade de bits = 6180 uS, topo 124, timer0, prescaler 1024
	while (1) 
    {
		
		if(start_dht22() == 1){
 2d6:	0e 94 4b 00 	call	0x96	; 0x96 <start_dht22>
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	39 f4       	brne	.+14     	; 0x2ec <main+0x46>
			read_dht22(&humidity, &temperature);
 2de:	be 01       	movw	r22, r28
 2e0:	6d 5f       	subi	r22, 0xFD	; 253
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	ce 01       	movw	r24, r28
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	0e 94 5d 00 	call	0xba	; 0xba <read_dht22>
		}
		
		//mostra os valores de temperatura e humidade
		cmd_LCD(1,0);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 a9 00 	call	0x152	; 0x152 <cmd_LCD>
		fprintf(lcd, "temp:%d,%d",(temperature/10),(temperature%10));
 2f4:	4b 81       	ldd	r20, Y+3	; 0x03
 2f6:	5c 81       	ldd	r21, Y+4	; 0x04
 2f8:	9a 01       	movw	r18, r20
 2fa:	ad ec       	ldi	r26, 0xCD	; 205
 2fc:	bc ec       	ldi	r27, 0xCC	; 204
 2fe:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__umulhisi3>
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	9c 01       	movw	r18, r24
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	82 0f       	add	r24, r18
 322:	93 1f       	adc	r25, r19
 324:	9a 01       	movw	r18, r20
 326:	28 1b       	sub	r18, r24
 328:	39 0b       	sbc	r19, r25
 32a:	c9 01       	movw	r24, r18
 32c:	9f 93       	push	r25
 32e:	2f 93       	push	r18
 330:	9a 01       	movw	r18, r20
 332:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__umulhisi3>
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	96 95       	lsr	r25
 340:	87 95       	ror	r24
 342:	9f 93       	push	r25
 344:	8f 93       	push	r24
 346:	ff 92       	push	r15
 348:	ef 92       	push	r14
 34a:	df 92       	push	r13
 34c:	cf 92       	push	r12
 34e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <fprintf>
		cmd_LCD(0xC0, 0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	80 ec       	ldi	r24, 0xC0	; 192
 356:	0e 94 a9 00 	call	0x152	; 0x152 <cmd_LCD>
		fprintf(lcd, "hum:%d,%d",(humidity/10),(humidity%10));
 35a:	49 81       	ldd	r20, Y+1	; 0x01
 35c:	5a 81       	ldd	r21, Y+2	; 0x02
 35e:	9a 01       	movw	r18, r20
 360:	ad ec       	ldi	r26, 0xCD	; 205
 362:	bc ec       	ldi	r27, 0xCC	; 204
 364:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__umulhisi3>
 368:	96 95       	lsr	r25
 36a:	87 95       	ror	r24
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	9c 01       	movw	r18, r24
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	82 0f       	add	r24, r18
 388:	93 1f       	adc	r25, r19
 38a:	9a 01       	movw	r18, r20
 38c:	28 1b       	sub	r18, r24
 38e:	39 0b       	sbc	r19, r25
 390:	c9 01       	movw	r24, r18
 392:	9f 93       	push	r25
 394:	2f 93       	push	r18
 396:	9a 01       	movw	r18, r20
 398:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__umulhisi3>
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	1f 93       	push	r17
 3ae:	0f 93       	push	r16
 3b0:	df 92       	push	r13
 3b2:	cf 92       	push	r12
 3b4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <fprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b8:	3f ef       	ldi	r19, 0xFF	; 255
 3ba:	81 ee       	ldi	r24, 0xE1	; 225
 3bc:	94 e0       	ldi	r25, 0x04	; 4
 3be:	31 50       	subi	r19, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x118>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x122>
 3c8:	00 00       	nop
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	80 cf       	rjmp	.-256    	; 0x2d6 <main+0x30>

000003d6 <__umulhisi3>:
 3d6:	a2 9f       	mul	r26, r18
 3d8:	b0 01       	movw	r22, r0
 3da:	b3 9f       	mul	r27, r19
 3dc:	c0 01       	movw	r24, r0
 3de:	a3 9f       	mul	r26, r19
 3e0:	70 0d       	add	r23, r0
 3e2:	81 1d       	adc	r24, r1
 3e4:	11 24       	eor	r1, r1
 3e6:	91 1d       	adc	r25, r1
 3e8:	b2 9f       	mul	r27, r18
 3ea:	70 0d       	add	r23, r0
 3ec:	81 1d       	adc	r24, r1
 3ee:	11 24       	eor	r1, r1
 3f0:	91 1d       	adc	r25, r1
 3f2:	08 95       	ret

000003f4 <fprintf>:
 3f4:	a0 e0       	ldi	r26, 0x00	; 0
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e0 e0       	ldi	r30, 0x00	; 0
 3fa:	f2 e0       	ldi	r31, 0x02	; 2
 3fc:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__prologue_saves__+0x20>
 400:	ae 01       	movw	r20, r28
 402:	47 5f       	subi	r20, 0xF7	; 247
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	6f 81       	ldd	r22, Y+7	; 0x07
 408:	78 85       	ldd	r23, Y+8	; 0x08
 40a:	8d 81       	ldd	r24, Y+5	; 0x05
 40c:	9e 81       	ldd	r25, Y+6	; 0x06
 40e:	0e 94 0c 02 	call	0x418	; 0x418 <vfprintf>
 412:	e2 e0       	ldi	r30, 0x02	; 2
 414:	0c 94 c9 04 	jmp	0x992	; 0x992 <__epilogue_restores__+0x20>

00000418 <vfprintf>:
 418:	ab e0       	ldi	r26, 0x0B	; 11
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e2 e1       	ldi	r30, 0x12	; 18
 41e:	f2 e0       	ldi	r31, 0x02	; 2
 420:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__prologue_saves__>
 424:	6c 01       	movw	r12, r24
 426:	7b 01       	movw	r14, r22
 428:	8a 01       	movw	r16, r20
 42a:	fc 01       	movw	r30, r24
 42c:	17 82       	std	Z+7, r1	; 0x07
 42e:	16 82       	std	Z+6, r1	; 0x06
 430:	83 81       	ldd	r24, Z+3	; 0x03
 432:	81 ff       	sbrs	r24, 1
 434:	cc c1       	rjmp	.+920    	; 0x7ce <vfprintf+0x3b6>
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	3c 01       	movw	r6, r24
 43c:	f6 01       	movw	r30, r12
 43e:	93 81       	ldd	r25, Z+3	; 0x03
 440:	f7 01       	movw	r30, r14
 442:	93 fd       	sbrc	r25, 3
 444:	85 91       	lpm	r24, Z+
 446:	93 ff       	sbrs	r25, 3
 448:	81 91       	ld	r24, Z+
 44a:	7f 01       	movw	r14, r30
 44c:	88 23       	and	r24, r24
 44e:	09 f4       	brne	.+2      	; 0x452 <vfprintf+0x3a>
 450:	ba c1       	rjmp	.+884    	; 0x7c6 <vfprintf+0x3ae>
 452:	85 32       	cpi	r24, 0x25	; 37
 454:	39 f4       	brne	.+14     	; 0x464 <vfprintf+0x4c>
 456:	93 fd       	sbrc	r25, 3
 458:	85 91       	lpm	r24, Z+
 45a:	93 ff       	sbrs	r25, 3
 45c:	81 91       	ld	r24, Z+
 45e:	7f 01       	movw	r14, r30
 460:	85 32       	cpi	r24, 0x25	; 37
 462:	29 f4       	brne	.+10     	; 0x46e <vfprintf+0x56>
 464:	b6 01       	movw	r22, r12
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 46c:	e7 cf       	rjmp	.-50     	; 0x43c <vfprintf+0x24>
 46e:	91 2c       	mov	r9, r1
 470:	21 2c       	mov	r2, r1
 472:	31 2c       	mov	r3, r1
 474:	ff e1       	ldi	r31, 0x1F	; 31
 476:	f3 15       	cp	r31, r3
 478:	d8 f0       	brcs	.+54     	; 0x4b0 <vfprintf+0x98>
 47a:	8b 32       	cpi	r24, 0x2B	; 43
 47c:	79 f0       	breq	.+30     	; 0x49c <vfprintf+0x84>
 47e:	38 f4       	brcc	.+14     	; 0x48e <vfprintf+0x76>
 480:	80 32       	cpi	r24, 0x20	; 32
 482:	79 f0       	breq	.+30     	; 0x4a2 <vfprintf+0x8a>
 484:	83 32       	cpi	r24, 0x23	; 35
 486:	a1 f4       	brne	.+40     	; 0x4b0 <vfprintf+0x98>
 488:	23 2d       	mov	r18, r3
 48a:	20 61       	ori	r18, 0x10	; 16
 48c:	1d c0       	rjmp	.+58     	; 0x4c8 <vfprintf+0xb0>
 48e:	8d 32       	cpi	r24, 0x2D	; 45
 490:	61 f0       	breq	.+24     	; 0x4aa <vfprintf+0x92>
 492:	80 33       	cpi	r24, 0x30	; 48
 494:	69 f4       	brne	.+26     	; 0x4b0 <vfprintf+0x98>
 496:	23 2d       	mov	r18, r3
 498:	21 60       	ori	r18, 0x01	; 1
 49a:	16 c0       	rjmp	.+44     	; 0x4c8 <vfprintf+0xb0>
 49c:	83 2d       	mov	r24, r3
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	38 2e       	mov	r3, r24
 4a2:	e3 2d       	mov	r30, r3
 4a4:	e4 60       	ori	r30, 0x04	; 4
 4a6:	3e 2e       	mov	r3, r30
 4a8:	2a c0       	rjmp	.+84     	; 0x4fe <vfprintf+0xe6>
 4aa:	f3 2d       	mov	r31, r3
 4ac:	f8 60       	ori	r31, 0x08	; 8
 4ae:	1d c0       	rjmp	.+58     	; 0x4ea <vfprintf+0xd2>
 4b0:	37 fc       	sbrc	r3, 7
 4b2:	2d c0       	rjmp	.+90     	; 0x50e <vfprintf+0xf6>
 4b4:	20 ed       	ldi	r18, 0xD0	; 208
 4b6:	28 0f       	add	r18, r24
 4b8:	2a 30       	cpi	r18, 0x0A	; 10
 4ba:	40 f0       	brcs	.+16     	; 0x4cc <vfprintf+0xb4>
 4bc:	8e 32       	cpi	r24, 0x2E	; 46
 4be:	b9 f4       	brne	.+46     	; 0x4ee <vfprintf+0xd6>
 4c0:	36 fc       	sbrc	r3, 6
 4c2:	81 c1       	rjmp	.+770    	; 0x7c6 <vfprintf+0x3ae>
 4c4:	23 2d       	mov	r18, r3
 4c6:	20 64       	ori	r18, 0x40	; 64
 4c8:	32 2e       	mov	r3, r18
 4ca:	19 c0       	rjmp	.+50     	; 0x4fe <vfprintf+0xe6>
 4cc:	36 fe       	sbrs	r3, 6
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <vfprintf+0xc4>
 4d0:	8a e0       	ldi	r24, 0x0A	; 10
 4d2:	98 9e       	mul	r9, r24
 4d4:	20 0d       	add	r18, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	92 2e       	mov	r9, r18
 4da:	11 c0       	rjmp	.+34     	; 0x4fe <vfprintf+0xe6>
 4dc:	ea e0       	ldi	r30, 0x0A	; 10
 4de:	2e 9e       	mul	r2, r30
 4e0:	20 0d       	add	r18, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	22 2e       	mov	r2, r18
 4e6:	f3 2d       	mov	r31, r3
 4e8:	f0 62       	ori	r31, 0x20	; 32
 4ea:	3f 2e       	mov	r3, r31
 4ec:	08 c0       	rjmp	.+16     	; 0x4fe <vfprintf+0xe6>
 4ee:	8c 36       	cpi	r24, 0x6C	; 108
 4f0:	21 f4       	brne	.+8      	; 0x4fa <vfprintf+0xe2>
 4f2:	83 2d       	mov	r24, r3
 4f4:	80 68       	ori	r24, 0x80	; 128
 4f6:	38 2e       	mov	r3, r24
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <vfprintf+0xe6>
 4fa:	88 36       	cpi	r24, 0x68	; 104
 4fc:	41 f4       	brne	.+16     	; 0x50e <vfprintf+0xf6>
 4fe:	f7 01       	movw	r30, r14
 500:	93 fd       	sbrc	r25, 3
 502:	85 91       	lpm	r24, Z+
 504:	93 ff       	sbrs	r25, 3
 506:	81 91       	ld	r24, Z+
 508:	7f 01       	movw	r14, r30
 50a:	81 11       	cpse	r24, r1
 50c:	b3 cf       	rjmp	.-154    	; 0x474 <vfprintf+0x5c>
 50e:	98 2f       	mov	r25, r24
 510:	9f 7d       	andi	r25, 0xDF	; 223
 512:	95 54       	subi	r25, 0x45	; 69
 514:	93 30       	cpi	r25, 0x03	; 3
 516:	28 f4       	brcc	.+10     	; 0x522 <vfprintf+0x10a>
 518:	0c 5f       	subi	r16, 0xFC	; 252
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	9f e3       	ldi	r25, 0x3F	; 63
 51e:	99 83       	std	Y+1, r25	; 0x01
 520:	0d c0       	rjmp	.+26     	; 0x53c <vfprintf+0x124>
 522:	83 36       	cpi	r24, 0x63	; 99
 524:	31 f0       	breq	.+12     	; 0x532 <vfprintf+0x11a>
 526:	83 37       	cpi	r24, 0x73	; 115
 528:	71 f0       	breq	.+28     	; 0x546 <vfprintf+0x12e>
 52a:	83 35       	cpi	r24, 0x53	; 83
 52c:	09 f0       	breq	.+2      	; 0x530 <vfprintf+0x118>
 52e:	59 c0       	rjmp	.+178    	; 0x5e2 <vfprintf+0x1ca>
 530:	21 c0       	rjmp	.+66     	; 0x574 <vfprintf+0x15c>
 532:	f8 01       	movw	r30, r16
 534:	80 81       	ld	r24, Z
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	0e 5f       	subi	r16, 0xFE	; 254
 53a:	1f 4f       	sbci	r17, 0xFF	; 255
 53c:	88 24       	eor	r8, r8
 53e:	83 94       	inc	r8
 540:	91 2c       	mov	r9, r1
 542:	53 01       	movw	r10, r6
 544:	13 c0       	rjmp	.+38     	; 0x56c <vfprintf+0x154>
 546:	28 01       	movw	r4, r16
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	4f 0e       	add	r4, r31
 54c:	51 1c       	adc	r5, r1
 54e:	f8 01       	movw	r30, r16
 550:	a0 80       	ld	r10, Z
 552:	b1 80       	ldd	r11, Z+1	; 0x01
 554:	36 fe       	sbrs	r3, 6
 556:	03 c0       	rjmp	.+6      	; 0x55e <vfprintf+0x146>
 558:	69 2d       	mov	r22, r9
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <vfprintf+0x14a>
 55e:	6f ef       	ldi	r22, 0xFF	; 255
 560:	7f ef       	ldi	r23, 0xFF	; 255
 562:	c5 01       	movw	r24, r10
 564:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <strnlen>
 568:	4c 01       	movw	r8, r24
 56a:	82 01       	movw	r16, r4
 56c:	f3 2d       	mov	r31, r3
 56e:	ff 77       	andi	r31, 0x7F	; 127
 570:	3f 2e       	mov	r3, r31
 572:	16 c0       	rjmp	.+44     	; 0x5a0 <vfprintf+0x188>
 574:	28 01       	movw	r4, r16
 576:	22 e0       	ldi	r18, 0x02	; 2
 578:	42 0e       	add	r4, r18
 57a:	51 1c       	adc	r5, r1
 57c:	f8 01       	movw	r30, r16
 57e:	a0 80       	ld	r10, Z
 580:	b1 80       	ldd	r11, Z+1	; 0x01
 582:	36 fe       	sbrs	r3, 6
 584:	03 c0       	rjmp	.+6      	; 0x58c <vfprintf+0x174>
 586:	69 2d       	mov	r22, r9
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <vfprintf+0x178>
 58c:	6f ef       	ldi	r22, 0xFF	; 255
 58e:	7f ef       	ldi	r23, 0xFF	; 255
 590:	c5 01       	movw	r24, r10
 592:	0e 94 ed 03 	call	0x7da	; 0x7da <strnlen_P>
 596:	4c 01       	movw	r8, r24
 598:	f3 2d       	mov	r31, r3
 59a:	f0 68       	ori	r31, 0x80	; 128
 59c:	3f 2e       	mov	r3, r31
 59e:	82 01       	movw	r16, r4
 5a0:	33 fc       	sbrc	r3, 3
 5a2:	1b c0       	rjmp	.+54     	; 0x5da <vfprintf+0x1c2>
 5a4:	82 2d       	mov	r24, r2
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	88 16       	cp	r8, r24
 5aa:	99 06       	cpc	r9, r25
 5ac:	b0 f4       	brcc	.+44     	; 0x5da <vfprintf+0x1c2>
 5ae:	b6 01       	movw	r22, r12
 5b0:	80 e2       	ldi	r24, 0x20	; 32
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 5b8:	2a 94       	dec	r2
 5ba:	f4 cf       	rjmp	.-24     	; 0x5a4 <vfprintf+0x18c>
 5bc:	f5 01       	movw	r30, r10
 5be:	37 fc       	sbrc	r3, 7
 5c0:	85 91       	lpm	r24, Z+
 5c2:	37 fe       	sbrs	r3, 7
 5c4:	81 91       	ld	r24, Z+
 5c6:	5f 01       	movw	r10, r30
 5c8:	b6 01       	movw	r22, r12
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 5d0:	21 10       	cpse	r2, r1
 5d2:	2a 94       	dec	r2
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	82 1a       	sub	r8, r18
 5d8:	91 08       	sbc	r9, r1
 5da:	81 14       	cp	r8, r1
 5dc:	91 04       	cpc	r9, r1
 5de:	71 f7       	brne	.-36     	; 0x5bc <vfprintf+0x1a4>
 5e0:	e8 c0       	rjmp	.+464    	; 0x7b2 <vfprintf+0x39a>
 5e2:	84 36       	cpi	r24, 0x64	; 100
 5e4:	11 f0       	breq	.+4      	; 0x5ea <vfprintf+0x1d2>
 5e6:	89 36       	cpi	r24, 0x69	; 105
 5e8:	41 f5       	brne	.+80     	; 0x63a <vfprintf+0x222>
 5ea:	f8 01       	movw	r30, r16
 5ec:	37 fe       	sbrs	r3, 7
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <vfprintf+0x1e6>
 5f0:	60 81       	ld	r22, Z
 5f2:	71 81       	ldd	r23, Z+1	; 0x01
 5f4:	82 81       	ldd	r24, Z+2	; 0x02
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	0c 5f       	subi	r16, 0xFC	; 252
 5fa:	1f 4f       	sbci	r17, 0xFF	; 255
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <vfprintf+0x1f6>
 5fe:	60 81       	ld	r22, Z
 600:	71 81       	ldd	r23, Z+1	; 0x01
 602:	07 2e       	mov	r0, r23
 604:	00 0c       	add	r0, r0
 606:	88 0b       	sbc	r24, r24
 608:	99 0b       	sbc	r25, r25
 60a:	0e 5f       	subi	r16, 0xFE	; 254
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	f3 2d       	mov	r31, r3
 610:	ff 76       	andi	r31, 0x6F	; 111
 612:	3f 2e       	mov	r3, r31
 614:	97 ff       	sbrs	r25, 7
 616:	09 c0       	rjmp	.+18     	; 0x62a <vfprintf+0x212>
 618:	90 95       	com	r25
 61a:	80 95       	com	r24
 61c:	70 95       	com	r23
 61e:	61 95       	neg	r22
 620:	7f 4f       	sbci	r23, 0xFF	; 255
 622:	8f 4f       	sbci	r24, 0xFF	; 255
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	f0 68       	ori	r31, 0x80	; 128
 628:	3f 2e       	mov	r3, r31
 62a:	2a e0       	ldi	r18, 0x0A	; 10
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	a3 01       	movw	r20, r6
 630:	0e 94 3f 04 	call	0x87e	; 0x87e <__ultoa_invert>
 634:	88 2e       	mov	r8, r24
 636:	86 18       	sub	r8, r6
 638:	45 c0       	rjmp	.+138    	; 0x6c4 <vfprintf+0x2ac>
 63a:	85 37       	cpi	r24, 0x75	; 117
 63c:	31 f4       	brne	.+12     	; 0x64a <vfprintf+0x232>
 63e:	23 2d       	mov	r18, r3
 640:	2f 7e       	andi	r18, 0xEF	; 239
 642:	b2 2e       	mov	r11, r18
 644:	2a e0       	ldi	r18, 0x0A	; 10
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	25 c0       	rjmp	.+74     	; 0x694 <vfprintf+0x27c>
 64a:	93 2d       	mov	r25, r3
 64c:	99 7f       	andi	r25, 0xF9	; 249
 64e:	b9 2e       	mov	r11, r25
 650:	8f 36       	cpi	r24, 0x6F	; 111
 652:	c1 f0       	breq	.+48     	; 0x684 <vfprintf+0x26c>
 654:	18 f4       	brcc	.+6      	; 0x65c <vfprintf+0x244>
 656:	88 35       	cpi	r24, 0x58	; 88
 658:	79 f0       	breq	.+30     	; 0x678 <vfprintf+0x260>
 65a:	b5 c0       	rjmp	.+362    	; 0x7c6 <vfprintf+0x3ae>
 65c:	80 37       	cpi	r24, 0x70	; 112
 65e:	19 f0       	breq	.+6      	; 0x666 <vfprintf+0x24e>
 660:	88 37       	cpi	r24, 0x78	; 120
 662:	21 f0       	breq	.+8      	; 0x66c <vfprintf+0x254>
 664:	b0 c0       	rjmp	.+352    	; 0x7c6 <vfprintf+0x3ae>
 666:	e9 2f       	mov	r30, r25
 668:	e0 61       	ori	r30, 0x10	; 16
 66a:	be 2e       	mov	r11, r30
 66c:	b4 fe       	sbrs	r11, 4
 66e:	0d c0       	rjmp	.+26     	; 0x68a <vfprintf+0x272>
 670:	fb 2d       	mov	r31, r11
 672:	f4 60       	ori	r31, 0x04	; 4
 674:	bf 2e       	mov	r11, r31
 676:	09 c0       	rjmp	.+18     	; 0x68a <vfprintf+0x272>
 678:	34 fe       	sbrs	r3, 4
 67a:	0a c0       	rjmp	.+20     	; 0x690 <vfprintf+0x278>
 67c:	29 2f       	mov	r18, r25
 67e:	26 60       	ori	r18, 0x06	; 6
 680:	b2 2e       	mov	r11, r18
 682:	06 c0       	rjmp	.+12     	; 0x690 <vfprintf+0x278>
 684:	28 e0       	ldi	r18, 0x08	; 8
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	05 c0       	rjmp	.+10     	; 0x694 <vfprintf+0x27c>
 68a:	20 e1       	ldi	r18, 0x10	; 16
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <vfprintf+0x27c>
 690:	20 e1       	ldi	r18, 0x10	; 16
 692:	32 e0       	ldi	r19, 0x02	; 2
 694:	f8 01       	movw	r30, r16
 696:	b7 fe       	sbrs	r11, 7
 698:	07 c0       	rjmp	.+14     	; 0x6a8 <vfprintf+0x290>
 69a:	60 81       	ld	r22, Z
 69c:	71 81       	ldd	r23, Z+1	; 0x01
 69e:	82 81       	ldd	r24, Z+2	; 0x02
 6a0:	93 81       	ldd	r25, Z+3	; 0x03
 6a2:	0c 5f       	subi	r16, 0xFC	; 252
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <vfprintf+0x29c>
 6a8:	60 81       	ld	r22, Z
 6aa:	71 81       	ldd	r23, Z+1	; 0x01
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 5f       	subi	r16, 0xFE	; 254
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	a3 01       	movw	r20, r6
 6b6:	0e 94 3f 04 	call	0x87e	; 0x87e <__ultoa_invert>
 6ba:	88 2e       	mov	r8, r24
 6bc:	86 18       	sub	r8, r6
 6be:	fb 2d       	mov	r31, r11
 6c0:	ff 77       	andi	r31, 0x7F	; 127
 6c2:	3f 2e       	mov	r3, r31
 6c4:	36 fe       	sbrs	r3, 6
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <vfprintf+0x2ca>
 6c8:	23 2d       	mov	r18, r3
 6ca:	2e 7f       	andi	r18, 0xFE	; 254
 6cc:	a2 2e       	mov	r10, r18
 6ce:	89 14       	cp	r8, r9
 6d0:	58 f4       	brcc	.+22     	; 0x6e8 <vfprintf+0x2d0>
 6d2:	34 fe       	sbrs	r3, 4
 6d4:	0b c0       	rjmp	.+22     	; 0x6ec <vfprintf+0x2d4>
 6d6:	32 fc       	sbrc	r3, 2
 6d8:	09 c0       	rjmp	.+18     	; 0x6ec <vfprintf+0x2d4>
 6da:	83 2d       	mov	r24, r3
 6dc:	8e 7e       	andi	r24, 0xEE	; 238
 6de:	a8 2e       	mov	r10, r24
 6e0:	05 c0       	rjmp	.+10     	; 0x6ec <vfprintf+0x2d4>
 6e2:	b8 2c       	mov	r11, r8
 6e4:	a3 2c       	mov	r10, r3
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <vfprintf+0x2d6>
 6e8:	b8 2c       	mov	r11, r8
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <vfprintf+0x2d6>
 6ec:	b9 2c       	mov	r11, r9
 6ee:	a4 fe       	sbrs	r10, 4
 6f0:	0f c0       	rjmp	.+30     	; 0x710 <vfprintf+0x2f8>
 6f2:	fe 01       	movw	r30, r28
 6f4:	e8 0d       	add	r30, r8
 6f6:	f1 1d       	adc	r31, r1
 6f8:	80 81       	ld	r24, Z
 6fa:	80 33       	cpi	r24, 0x30	; 48
 6fc:	21 f4       	brne	.+8      	; 0x706 <vfprintf+0x2ee>
 6fe:	9a 2d       	mov	r25, r10
 700:	99 7e       	andi	r25, 0xE9	; 233
 702:	a9 2e       	mov	r10, r25
 704:	09 c0       	rjmp	.+18     	; 0x718 <vfprintf+0x300>
 706:	a2 fe       	sbrs	r10, 2
 708:	06 c0       	rjmp	.+12     	; 0x716 <vfprintf+0x2fe>
 70a:	b3 94       	inc	r11
 70c:	b3 94       	inc	r11
 70e:	04 c0       	rjmp	.+8      	; 0x718 <vfprintf+0x300>
 710:	8a 2d       	mov	r24, r10
 712:	86 78       	andi	r24, 0x86	; 134
 714:	09 f0       	breq	.+2      	; 0x718 <vfprintf+0x300>
 716:	b3 94       	inc	r11
 718:	a3 fc       	sbrc	r10, 3
 71a:	11 c0       	rjmp	.+34     	; 0x73e <vfprintf+0x326>
 71c:	a0 fe       	sbrs	r10, 0
 71e:	06 c0       	rjmp	.+12     	; 0x72c <vfprintf+0x314>
 720:	b2 14       	cp	r11, r2
 722:	88 f4       	brcc	.+34     	; 0x746 <vfprintf+0x32e>
 724:	28 0c       	add	r2, r8
 726:	92 2c       	mov	r9, r2
 728:	9b 18       	sub	r9, r11
 72a:	0e c0       	rjmp	.+28     	; 0x748 <vfprintf+0x330>
 72c:	b2 14       	cp	r11, r2
 72e:	60 f4       	brcc	.+24     	; 0x748 <vfprintf+0x330>
 730:	b6 01       	movw	r22, r12
 732:	80 e2       	ldi	r24, 0x20	; 32
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 73a:	b3 94       	inc	r11
 73c:	f7 cf       	rjmp	.-18     	; 0x72c <vfprintf+0x314>
 73e:	b2 14       	cp	r11, r2
 740:	18 f4       	brcc	.+6      	; 0x748 <vfprintf+0x330>
 742:	2b 18       	sub	r2, r11
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x332>
 746:	98 2c       	mov	r9, r8
 748:	21 2c       	mov	r2, r1
 74a:	a4 fe       	sbrs	r10, 4
 74c:	10 c0       	rjmp	.+32     	; 0x76e <vfprintf+0x356>
 74e:	b6 01       	movw	r22, r12
 750:	80 e3       	ldi	r24, 0x30	; 48
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 758:	a2 fe       	sbrs	r10, 2
 75a:	17 c0       	rjmp	.+46     	; 0x78a <vfprintf+0x372>
 75c:	a1 fc       	sbrc	r10, 1
 75e:	03 c0       	rjmp	.+6      	; 0x766 <vfprintf+0x34e>
 760:	88 e7       	ldi	r24, 0x78	; 120
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0x352>
 766:	88 e5       	ldi	r24, 0x58	; 88
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	b6 01       	movw	r22, r12
 76c:	0c c0       	rjmp	.+24     	; 0x786 <vfprintf+0x36e>
 76e:	8a 2d       	mov	r24, r10
 770:	86 78       	andi	r24, 0x86	; 134
 772:	59 f0       	breq	.+22     	; 0x78a <vfprintf+0x372>
 774:	a1 fe       	sbrs	r10, 1
 776:	02 c0       	rjmp	.+4      	; 0x77c <vfprintf+0x364>
 778:	8b e2       	ldi	r24, 0x2B	; 43
 77a:	01 c0       	rjmp	.+2      	; 0x77e <vfprintf+0x366>
 77c:	80 e2       	ldi	r24, 0x20	; 32
 77e:	a7 fc       	sbrc	r10, 7
 780:	8d e2       	ldi	r24, 0x2D	; 45
 782:	b6 01       	movw	r22, r12
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 78a:	89 14       	cp	r8, r9
 78c:	38 f4       	brcc	.+14     	; 0x79c <vfprintf+0x384>
 78e:	b6 01       	movw	r22, r12
 790:	80 e3       	ldi	r24, 0x30	; 48
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 798:	9a 94       	dec	r9
 79a:	f7 cf       	rjmp	.-18     	; 0x78a <vfprintf+0x372>
 79c:	8a 94       	dec	r8
 79e:	f3 01       	movw	r30, r6
 7a0:	e8 0d       	add	r30, r8
 7a2:	f1 1d       	adc	r31, r1
 7a4:	80 81       	ld	r24, Z
 7a6:	b6 01       	movw	r22, r12
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 7ae:	81 10       	cpse	r8, r1
 7b0:	f5 cf       	rjmp	.-22     	; 0x79c <vfprintf+0x384>
 7b2:	22 20       	and	r2, r2
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <vfprintf+0x3a0>
 7b6:	42 ce       	rjmp	.-892    	; 0x43c <vfprintf+0x24>
 7b8:	b6 01       	movw	r22, r12
 7ba:	80 e2       	ldi	r24, 0x20	; 32
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 7c2:	2a 94       	dec	r2
 7c4:	f6 cf       	rjmp	.-20     	; 0x7b2 <vfprintf+0x39a>
 7c6:	f6 01       	movw	r30, r12
 7c8:	86 81       	ldd	r24, Z+6	; 0x06
 7ca:	97 81       	ldd	r25, Z+7	; 0x07
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <vfprintf+0x3ba>
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	9f ef       	ldi	r25, 0xFF	; 255
 7d2:	2b 96       	adiw	r28, 0x0b	; 11
 7d4:	e2 e1       	ldi	r30, 0x12	; 18
 7d6:	0c 94 b9 04 	jmp	0x972	; 0x972 <__epilogue_restores__>

000007da <strnlen_P>:
 7da:	fc 01       	movw	r30, r24
 7dc:	05 90       	lpm	r0, Z+
 7de:	61 50       	subi	r22, 0x01	; 1
 7e0:	70 40       	sbci	r23, 0x00	; 0
 7e2:	01 10       	cpse	r0, r1
 7e4:	d8 f7       	brcc	.-10     	; 0x7dc <strnlen_P+0x2>
 7e6:	80 95       	com	r24
 7e8:	90 95       	com	r25
 7ea:	8e 0f       	add	r24, r30
 7ec:	9f 1f       	adc	r25, r31
 7ee:	08 95       	ret

000007f0 <strnlen>:
 7f0:	fc 01       	movw	r30, r24
 7f2:	61 50       	subi	r22, 0x01	; 1
 7f4:	70 40       	sbci	r23, 0x00	; 0
 7f6:	01 90       	ld	r0, Z+
 7f8:	01 10       	cpse	r0, r1
 7fa:	d8 f7       	brcc	.-10     	; 0x7f2 <strnlen+0x2>
 7fc:	80 95       	com	r24
 7fe:	90 95       	com	r25
 800:	8e 0f       	add	r24, r30
 802:	9f 1f       	adc	r25, r31
 804:	08 95       	ret

00000806 <fputc>:
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	fb 01       	movw	r30, r22
 810:	23 81       	ldd	r18, Z+3	; 0x03
 812:	21 fd       	sbrc	r18, 1
 814:	03 c0       	rjmp	.+6      	; 0x81c <fputc+0x16>
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	9f ef       	ldi	r25, 0xFF	; 255
 81a:	2c c0       	rjmp	.+88     	; 0x874 <fputc+0x6e>
 81c:	22 ff       	sbrs	r18, 2
 81e:	16 c0       	rjmp	.+44     	; 0x84c <fputc+0x46>
 820:	46 81       	ldd	r20, Z+6	; 0x06
 822:	57 81       	ldd	r21, Z+7	; 0x07
 824:	24 81       	ldd	r18, Z+4	; 0x04
 826:	35 81       	ldd	r19, Z+5	; 0x05
 828:	42 17       	cp	r20, r18
 82a:	53 07       	cpc	r21, r19
 82c:	44 f4       	brge	.+16     	; 0x83e <fputc+0x38>
 82e:	a0 81       	ld	r26, Z
 830:	b1 81       	ldd	r27, Z+1	; 0x01
 832:	9d 01       	movw	r18, r26
 834:	2f 5f       	subi	r18, 0xFF	; 255
 836:	3f 4f       	sbci	r19, 0xFF	; 255
 838:	31 83       	std	Z+1, r19	; 0x01
 83a:	20 83       	st	Z, r18
 83c:	8c 93       	st	X, r24
 83e:	26 81       	ldd	r18, Z+6	; 0x06
 840:	37 81       	ldd	r19, Z+7	; 0x07
 842:	2f 5f       	subi	r18, 0xFF	; 255
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	37 83       	std	Z+7, r19	; 0x07
 848:	26 83       	std	Z+6, r18	; 0x06
 84a:	14 c0       	rjmp	.+40     	; 0x874 <fputc+0x6e>
 84c:	8b 01       	movw	r16, r22
 84e:	ec 01       	movw	r28, r24
 850:	fb 01       	movw	r30, r22
 852:	00 84       	ldd	r0, Z+8	; 0x08
 854:	f1 85       	ldd	r31, Z+9	; 0x09
 856:	e0 2d       	mov	r30, r0
 858:	09 95       	icall
 85a:	89 2b       	or	r24, r25
 85c:	e1 f6       	brne	.-72     	; 0x816 <fputc+0x10>
 85e:	d8 01       	movw	r26, r16
 860:	16 96       	adiw	r26, 0x06	; 6
 862:	8d 91       	ld	r24, X+
 864:	9c 91       	ld	r25, X
 866:	17 97       	sbiw	r26, 0x07	; 7
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	17 96       	adiw	r26, 0x07	; 7
 86c:	9c 93       	st	X, r25
 86e:	8e 93       	st	-X, r24
 870:	16 97       	sbiw	r26, 0x06	; 6
 872:	ce 01       	movw	r24, r28
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	08 95       	ret

0000087e <__ultoa_invert>:
 87e:	fa 01       	movw	r30, r20
 880:	aa 27       	eor	r26, r26
 882:	28 30       	cpi	r18, 0x08	; 8
 884:	51 f1       	breq	.+84     	; 0x8da <__ultoa_invert+0x5c>
 886:	20 31       	cpi	r18, 0x10	; 16
 888:	81 f1       	breq	.+96     	; 0x8ea <__ultoa_invert+0x6c>
 88a:	e8 94       	clt
 88c:	6f 93       	push	r22
 88e:	6e 7f       	andi	r22, 0xFE	; 254
 890:	6e 5f       	subi	r22, 0xFE	; 254
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	af 4f       	sbci	r26, 0xFF	; 255
 89a:	b1 e0       	ldi	r27, 0x01	; 1
 89c:	3e d0       	rcall	.+124    	; 0x91a <__stack+0x1b>
 89e:	b4 e0       	ldi	r27, 0x04	; 4
 8a0:	3c d0       	rcall	.+120    	; 0x91a <__stack+0x1b>
 8a2:	67 0f       	add	r22, r23
 8a4:	78 1f       	adc	r23, r24
 8a6:	89 1f       	adc	r24, r25
 8a8:	9a 1f       	adc	r25, r26
 8aa:	a1 1d       	adc	r26, r1
 8ac:	68 0f       	add	r22, r24
 8ae:	79 1f       	adc	r23, r25
 8b0:	8a 1f       	adc	r24, r26
 8b2:	91 1d       	adc	r25, r1
 8b4:	a1 1d       	adc	r26, r1
 8b6:	6a 0f       	add	r22, r26
 8b8:	71 1d       	adc	r23, r1
 8ba:	81 1d       	adc	r24, r1
 8bc:	91 1d       	adc	r25, r1
 8be:	a1 1d       	adc	r26, r1
 8c0:	20 d0       	rcall	.+64     	; 0x902 <__stack+0x3>
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <__ultoa_invert+0x48>
 8c4:	68 94       	set
 8c6:	3f 91       	pop	r19
 8c8:	2a e0       	ldi	r18, 0x0A	; 10
 8ca:	26 9f       	mul	r18, r22
 8cc:	11 24       	eor	r1, r1
 8ce:	30 19       	sub	r19, r0
 8d0:	30 5d       	subi	r19, 0xD0	; 208
 8d2:	31 93       	st	Z+, r19
 8d4:	de f6       	brtc	.-74     	; 0x88c <__ultoa_invert+0xe>
 8d6:	cf 01       	movw	r24, r30
 8d8:	08 95       	ret
 8da:	46 2f       	mov	r20, r22
 8dc:	47 70       	andi	r20, 0x07	; 7
 8de:	40 5d       	subi	r20, 0xD0	; 208
 8e0:	41 93       	st	Z+, r20
 8e2:	b3 e0       	ldi	r27, 0x03	; 3
 8e4:	0f d0       	rcall	.+30     	; 0x904 <__stack+0x5>
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__ultoa_invert+0x5c>
 8e8:	f6 cf       	rjmp	.-20     	; 0x8d6 <__ultoa_invert+0x58>
 8ea:	46 2f       	mov	r20, r22
 8ec:	4f 70       	andi	r20, 0x0F	; 15
 8ee:	40 5d       	subi	r20, 0xD0	; 208
 8f0:	4a 33       	cpi	r20, 0x3A	; 58
 8f2:	18 f0       	brcs	.+6      	; 0x8fa <__ultoa_invert+0x7c>
 8f4:	49 5d       	subi	r20, 0xD9	; 217
 8f6:	31 fd       	sbrc	r19, 1
 8f8:	40 52       	subi	r20, 0x20	; 32
 8fa:	41 93       	st	Z+, r20
 8fc:	02 d0       	rcall	.+4      	; 0x902 <__stack+0x3>
 8fe:	a9 f7       	brne	.-22     	; 0x8ea <__ultoa_invert+0x6c>
 900:	ea cf       	rjmp	.-44     	; 0x8d6 <__ultoa_invert+0x58>
 902:	b4 e0       	ldi	r27, 0x04	; 4
 904:	a6 95       	lsr	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	ba 95       	dec	r27
 910:	c9 f7       	brne	.-14     	; 0x904 <__stack+0x5>
 912:	00 97       	sbiw	r24, 0x00	; 0
 914:	61 05       	cpc	r22, r1
 916:	71 05       	cpc	r23, r1
 918:	08 95       	ret
 91a:	9b 01       	movw	r18, r22
 91c:	ac 01       	movw	r20, r24
 91e:	0a 2e       	mov	r0, r26
 920:	06 94       	lsr	r0
 922:	57 95       	ror	r21
 924:	47 95       	ror	r20
 926:	37 95       	ror	r19
 928:	27 95       	ror	r18
 92a:	ba 95       	dec	r27
 92c:	c9 f7       	brne	.-14     	; 0x920 <__stack+0x21>
 92e:	62 0f       	add	r22, r18
 930:	73 1f       	adc	r23, r19
 932:	84 1f       	adc	r24, r20
 934:	95 1f       	adc	r25, r21
 936:	a0 1d       	adc	r26, r0
 938:	08 95       	ret

0000093a <__prologue_saves__>:
 93a:	2f 92       	push	r2
 93c:	3f 92       	push	r3
 93e:	4f 92       	push	r4
 940:	5f 92       	push	r5
 942:	6f 92       	push	r6
 944:	7f 92       	push	r7
 946:	8f 92       	push	r8
 948:	9f 92       	push	r9
 94a:	af 92       	push	r10
 94c:	bf 92       	push	r11
 94e:	cf 92       	push	r12
 950:	df 92       	push	r13
 952:	ef 92       	push	r14
 954:	ff 92       	push	r15
 956:	0f 93       	push	r16
 958:	1f 93       	push	r17
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	ca 1b       	sub	r28, r26
 964:	db 0b       	sbc	r29, r27
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	cd bf       	out	0x3d, r28	; 61
 970:	09 94       	ijmp

00000972 <__epilogue_restores__>:
 972:	2a 88       	ldd	r2, Y+18	; 0x12
 974:	39 88       	ldd	r3, Y+17	; 0x11
 976:	48 88       	ldd	r4, Y+16	; 0x10
 978:	5f 84       	ldd	r5, Y+15	; 0x0f
 97a:	6e 84       	ldd	r6, Y+14	; 0x0e
 97c:	7d 84       	ldd	r7, Y+13	; 0x0d
 97e:	8c 84       	ldd	r8, Y+12	; 0x0c
 980:	9b 84       	ldd	r9, Y+11	; 0x0b
 982:	aa 84       	ldd	r10, Y+10	; 0x0a
 984:	b9 84       	ldd	r11, Y+9	; 0x09
 986:	c8 84       	ldd	r12, Y+8	; 0x08
 988:	df 80       	ldd	r13, Y+7	; 0x07
 98a:	ee 80       	ldd	r14, Y+6	; 0x06
 98c:	fd 80       	ldd	r15, Y+5	; 0x05
 98e:	0c 81       	ldd	r16, Y+4	; 0x04
 990:	1b 81       	ldd	r17, Y+3	; 0x03
 992:	aa 81       	ldd	r26, Y+2	; 0x02
 994:	b9 81       	ldd	r27, Y+1	; 0x01
 996:	ce 0f       	add	r28, r30
 998:	d1 1d       	adc	r29, r1
 99a:	0f b6       	in	r0, 0x3f	; 63
 99c:	f8 94       	cli
 99e:	de bf       	out	0x3e, r29	; 62
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	cd bf       	out	0x3d, r28	; 61
 9a4:	ed 01       	movw	r28, r26
 9a6:	08 95       	ret

000009a8 <_exit>:
 9a8:	f8 94       	cli

000009aa <__stop_program>:
 9aa:	ff cf       	rjmp	.-2      	; 0x9aa <__stop_program>
